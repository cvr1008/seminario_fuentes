library(rjson)
obtener_nombre<-function(carpeta){
archivos <- as.list(list.files(path =carpeta))
lista_nombres<-list()
for(i in 1:length(archivos)){
posicion1<-regexpr("_", archivos[[i]])
posicion2<-regexpr("\\.", archivos[[i]])
subcadena<-substr(archivos[[i]], posicion1+1, posicion2-1)
lista_nombres[[i]]<-subcadena
}
return(lista_nombres)
}
obtener_archivo<-function(direccion){
lista_paises<-obtener_nombre(direccion)
lista_enlace<-list()
direccion_archivos<-list()
for(i in lista_paises){
cada_pais<-paste0("AMR_",i,".json")
lista_enlace[i]<-cada_pais
}
for(i in lista_enlace){
cada_archivo<-paste0(direccion,"/",i)
direccion_archivos[i]<-cada_archivo
}
for(i in direccion_archivos){
pais<-fromJSON(file= i)
enlace<-pais$links$archive
respuesta_archivo <- GET(enlace)# Hacer la solicitud HTTP para descargar el archivo
nombre_archivo<-basename(enlace)#Extrae el nombre del archivo de la URL
if (status_code(respuesta_archivo) == 200) {# Verificar si la solicitud fue exitosa (código 200, código estándar HTTP que significa "OK")
# Guardar el archivo ZIP localmente en formato binario
writeBin(content(respuesta_archivo, "raw"), nombre_archivo)
print("Archivo ZIP descargado correctamente.")
unzip(nombre_archivo, exdir = "carpeta_destino", overwrite = TRUE)
} else {
print(paste("Error al descargar el archivo. Código de respuesta:", status_code(respuesta_archivo)))
}
}
}
obtener_archivo("INPUT/DATA/Resistecia_Antibioticos_UE")
leer_archivo <- function(carpeta) {
carpeta_destino <- carpeta
archivos_zip <- list.files(carpeta_destino, pattern = "\\.zip$", full.names = TRUE)
# Iterar sobre los archivos .zip y descomprimirlos
for (archivo in archivos_zip) {
# Descomprimir el archivo .zip
archivos_extraidos <- unzip(archivo, exdir = carpeta_destino, overwrite = TRUE)
print(paste("Descomprimido:", archivo))  # Imprimir cada archivo que se descomprime
# Filtrar el archivo .xlsx entre los extraídos
archivo_xlsx <- archivos_extraidos[grepl("\\.xlsx$", archivos_extraidos)]#Aquí, grepl() busca archivos cuyos nombres terminen con .xlsx
# Verificar si hay algún archivo .xlsx descomprimido
if (length(archivo_xlsx) > 0) {
# Leer el archivo Excel como dataframe
datos_xlsx <- read_excel(archivo_xlsx[1])  # Leer el primer archivo .xlsx encontrado
# Asignar el dataframe al Global Environment usando el nombre del archivo como variable
nombre_variable <- make.names(basename(archivo_xlsx[1]))  # Crear un nombre de variable válido
assign(nombre_variable, datos_xlsx, envir = .GlobalEnv)  # Asignar el dataframe al Global Environment
}
}
}
leer_archivo("carpeta_destino")
# Cargar dplyr
library(dplyr)
library(ggplot2)
# 1. Listar los nombres de todos los dataframes que terminan en ".xlsx" (ajusta si es necesario)
nombres_dataframes <- ls(pattern = "_AMR_PUB\\.xlsx$")
# 2. Convertir los nombres a una lista de dataframes usando mget()
lista_dataframes <- mget(nombres_dataframes)
# 3. Unir todos los dataframes en uno solo usando bind_rows
df_combinado <- bind_rows(lista_dataframes, .id = "origen")
#seleccionamos las columnas que vamos a necesitar
paises_UE_df <- df_combinado %>%
select(rep_Country_name, rep_Country_code, zoonosis_name, matrix_name,
totUnitsTested, totUnitsPositive, sampUnitType_name, sampType_name,MIC_name, CUTOFFVALUE) %>%
mutate(zoonosis_name = sub(" .*", "", zoonosis_name)) %>%  # Extraer solo la primera palabra
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")
# Nuevo vector con los nombres de las columnas
nuevos_nombres <- c("NombrePais", "Codigo", "zoonosis_name","OrigenMuestra", "TotalMuestras","MuestraPositiva","Tipo_Unidad_Muestra","TipoMuestra","MIC_name","ValorCorte")  # Modifica según el número de columnas
# Asignar los nuevos nombres de las columnas al data frame
colnames(paises_UE_df) <- nuevos_nombres
save.image("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/AMR_paisesEU.RData")
# Cargar las bibliotecas necesarias
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
filter(Time == 2022) %>%
filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calcula la media en cada grupo y desagrupa
otra$mean_value[is.nan(otra$mean_value)] <- 0
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))  # Calcular la media por RegionCode
save.image("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/enviroment.RData")
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/enviroment.RData")
knitr::opts_chunk$set(echo = TRUE)
load("OUTPUT/enviroment")
file.exists("ruta_del_archivo")
load("OUTPUT/enviroment.RData")
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
library(sf)
library(sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
mapa_mundo_europa <- mapa_mudo %>%
filter(NAME %in% paises_UE)
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
library(leaflet)  # Para crear mapas interactivos
library(sf)       # Para trabajar con datos espaciales (sf)
library(viridis)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
mapa_mundo_europa <- mapa_mudo %>%
filter(NAME %in% paises_UE)
mapa_mundo_europa <- mapa_mudo %>% filter(NAME %in% paises_UE)
positivos_por_ciudad <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_pruebas = sum(TotalMuestras, na.rm = TRUE),
total_positivos= sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(ratio_positivo = (total_positivos / total_pruebas) * 100)
# Unir datos de positividad al mapa
mapa_mundo_europa$NAME <- as.character(mapa_mundo_europa$NAME)
positivos_por_ciudad$NombrePais <- as.character(positivos_por_ciudad$NombrePais)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(positivos_por_ciudad, by = c("NAME" = "NombrePais"))
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = ratio_positivo)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
mapa_interactivo
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
library(sf)       # Para trabajar con datos espaciales (sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
mapa_mundo_europa <- mapa_mudo %>%
filter(NAME %in% paises_UE)
mapa_mundo_europa <- mapa_mudo %>% filter(NAME %in% paises_UE)
positivos_por_ciudad <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_pruebas = sum(TotalMuestras, na.rm = TRUE),
total_positivos= sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(ratio_positivo = (total_positivos / total_pruebas) * 100)
# Unir datos de positividad al mapa
mapa_mundo_europa$NAME <- as.character(mapa_mundo_europa$NAME)
positivos_por_ciudad$NombrePais <- as.character(positivos_por_ciudad$NombrePais)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(positivos_por_ciudad, by = c("NAME" = "NombrePais"))
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = ratio_positivo)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
mapa_interactivo
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
library(sf)       # Para trabajar con datos espaciales (sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
mapa_mundo_europa <- mapa_mudo %>%
filter(NAME %in% paises_UE)
mapa_mundo_europa <- mapa_mudo %>% filter(NAME %in% paises_UE)
positivos_por_ciudad <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_pruebas = sum(TotalMuestras, na.rm = TRUE),
total_positivos= sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(ratio_positivo = (total_positivos / total_pruebas) * 100)
# Unir datos de positividad al mapa
mapa_mundo_europa$NAME <- as.character(mapa_mundo_europa$NAME)
positivos_por_ciudad$NombrePais <- as.character(positivos_por_ciudad$NombrePais)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(positivos_por_ciudad, by = c("NAME" = "NombrePais"))
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = ratio_positivo)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
mapa_interactivo
View(mapa_mundo_europa)
View(positivos_por_ciudad)
View(paises_UE_df)
unique(mapa_mundo_europa$NAME)
unique(positivos_por_ciudad$NombrePais)
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
library(sf)       # Para trabajar con datos espaciales (sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
mapa_mundo_europa <- mapa_mudo %>%
filter(NAME %in% paises_UE)
mapa_mundo_europa <- mapa_mudo %>% filter(NAME %in% paises_UE)
positivos_por_ciudad <- paises_UE_df %>%
filter(NombrePais != "United Kingdom (Northern Ireland)")%>%
group_by(NombrePais) %>%
summarize(total_pruebas = sum(TotalMuestras, na.rm = TRUE),
total_positivos= sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(ratio_positivo = (total_positivos / total_pruebas) * 100)
# Unir datos de positividad al mapa
mapa_mundo_europa$NAME <- as.character(mapa_mundo_europa$NAME)
positivos_por_ciudad$NombrePais <- as.character(positivos_por_ciudad$NombrePais)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(positivos_por_ciudad, by = c("NAME" = "NombrePais"))
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = ratio_positivo)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
mapa_interactivo
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
library(sf)       # Para trabajar con datos espaciales (sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
mapa_mundo_europa <- mapa_mudo %>%
filter(NAME %in% paises_UE)
mapa_mundo_europa <- mapa_mudo %>% filter(NAME %in% paises_UE)
positivos_por_ciudad <- paises_UE_df %>%
filter(NombrePais != "United Kingdom (Northern Ireland)")%>%
group_by(NombrePais) %>%
summarize(total_pruebas = sum(TotalMuestras, na.rm = TRUE),
total_positivos= sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(ratio_positivo = (total_positivos / total_pruebas) * 100)
# Unir datos de positividad al mapa
mapa_mundo_europa$NAME <- as.character(mapa_mundo_europa$NAME)
positivos_por_ciudad$NombrePais <- as.character(positivos_por_ciudad$NombrePais)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(positivos_por_ciudad, by = c("NAME" = "NombrePais"))
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = ratio_positivo)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
mapa_interactivo
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
library(sf)       # Para trabajar con datos espaciales (sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
mapa_mundo_europa <- mapa_mudo %>%
filter(NAME %in% paises_UE)
mapa_mundo_europa <- mapa_mudo %>% filter(NAME %in% paises_UE)
positivos_por_ciudad <- paises_UE_df %>%
filter(NombrePais != "United Kingdom (Northern Ireland)")%>%
group_by(NombrePais) %>%
summarize(total_pruebas = sum(TotalMuestras, na.rm = TRUE),
total_positivos= sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(ratio_positivo = (total_positivos / total_pruebas) * 100)
# Unir datos de positividad al mapa
mapa_mundo_europa$NAME <- as.character(mapa_mundo_europa$NAME)
positivos_por_ciudad$NombrePais <- as.character(positivos_por_ciudad$NombrePais)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(positivos_por_ciudad, by = c("NAME" = "NombrePais"))
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = ratio_positivo)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
mapa_interactivo
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
mapa_mundo_europa <- mapa_mudo %>%
dplyr::filter(NAME %in% paises_UE)
mapa_mundo_europa <- mapa_mudo %>% dplyr::filter(NAME %in% paises_UE)
positivos_por_ciudad <- paises_UE_df %>%
dplyr::filter(NombrePais != "United Kingdom (Northern Ireland)")%>%
group_by(NombrePais) %>%
dplyr::summarize(total_pruebas = sum(TotalMuestras, na.rm = TRUE),
total_positivos= sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(ratio_positivo = (total_positivos / total_pruebas) * 100)
# Unir datos de positividad al mapa
mapa_mundo_europa$NAME <- as.character(mapa_mundo_europa$NAME)
positivos_por_ciudad$NombrePais <- as.character(positivos_por_ciudad$NombrePais)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(positivos_por_ciudad, by = c("NAME" = "NombrePais"))
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = ratio_positivo)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
mapa_interactivo
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/enviroment.RData")
View(paises_UE_df)
resistencia_paises <- paises_UE_df%>%
mutate(Resistencia = ifelse(MIC_name >= ValorCorte, "Resistente", "Susceptible"))
library(dplyr)
Crear una nueva columna en el dataframe con la clasificación
resistencia_paises <- paises_UE_df%>%
mutate(Resistencia = ifelse(MIC_name >= ValorCorte, "Resistente", "Susceptible"))
# Ver el resumen de los datos clasificados
summary(resistencia_paises$Resistencia)
# Contar cuántos son resistentes y cuántos son susceptibles
table(resistencia_paises$Resistencia)
library(ggplot2)
paises_UE_df %>%
group_by(rep_Country_name) %>%
summarize(total_tested = sum(totUnitsTested, na.rm = TRUE),
total_positive = sum(totUnitsPositive, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
View(incidencia_2022MF)
str(paises_UE_df)
View(media_region)
View(otra)
# Calcular la media basada en la proporción de positivos
media_bacterias <- tibble %>%
group_by(Codigo, zoonosis_name) %>%
summarise(
media = mean(MuestraPositiva / TotalMuestras, na.rm = TRUE)
) %>%
ungroup()
# Calcular la media basada en la proporción de positivos
media_bacterias <- paises_UE_df %>%
group_by(Codigo, zoonosis_name) %>%
summarise(
media = mean(MuestraPositiva / TotalMuestras, na.rm = TRUE)
) %>%
ungroup()
# Ver la tabla resultante
print(media_bacterias)
# Calcular la media basada en la proporción de positivos
media_bacterias <- paises_UE_df %>%
group_by(Codigo, zoonosis_name) %>%
summarise(
media = mean((MuestraPositiva / TotalMuestras)*100, na.rm = TRUE)
) %>%
ungroup()
View(media_bacterias)
media_bacterias$mean_value[is.nan(media_bacterias$media)] <- 0
media_bacterias$media[is.nan(media_bacterias$media)] <- 0
# Calcular la media basada en la proporción de positivos
media_bacterias <- paises_UE_df %>%
group_by(Codigo, zoonosis_name) %>%
summarise(
media = mean((MuestraPositiva / TotalMuestras)*100, na.rm = TRUE)
) %>%
ungroup()
media_bacterias$media[is.nan(media_bacterias$media)] <- 0
View(media_bacterias)
library(dplyr)
# Calcular la media basada en la proporción de positivos
media_ganaderia <- paises_UE_df %>%
group_by(Codigo, zoonosis_name) %>%
summarise(
media = mean((MuestraPositiva / TotalMuestras)*100, na.rm = TRUE)
) %>%
ungroup()
media_ganaderia$media[is.nan(media_ganaderia$media)] <- 0
resultado <- inner_join(media_ganaderia, otra, by = c("media" = "RegionCode"))
resultado <- inner_join(media_ganaderia, otra, by = c("Codigo" = "RegionCode"))
View(resultado)
resultado <- right_join(media_ganaderia, otra, by = c("Codigo" = "RegionCode"))
str(media_bacterias)
str(ota)
str(otra)
str(media_bacterias)
str(otra)
resultado <- right_join(media_bacterias, otra, by = c("Codigo" = "RegionCode"))
resultado <- full_join(media_bacterias, otra, by = c("Codigo" = "RegionCode"))
otra <- otra %>%
dplyr::filter(RegionCode %in% lista_codigos_paises)
lista_codigos_paises <- list("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "EL", "ES", "FI", "FR", "HR", "HU",
"IE", "IT", "LT", "LU", "LV", "MT", "NL", "PL", "PT", "RO", "SE", "SI", "SK")
otra <- otra %>%
dplyr::filter(RegionCode %in% lista_codigos_paises)
resultado <- full_join(media_bacterias, otra, by = c("Codigo" = "RegionCode"))
