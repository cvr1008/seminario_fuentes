pib_2022_desc <- pib_2022 %>% arrange(desc(`2022`))
# sustituir las etiquetas de los países
pib_2022_desc_gr <- pib_2022_desc %>%
mutate(pais = case_when(
pais == "SK" ~ "Eslovaquia",
pais == "SI" ~ "Slovenia",
pais == "EE" ~ "Estonia",
pais == "MT" ~ "Malta",
pais == "LV" ~ "Latvia",
pais == "HR" ~ "Croatia",
pais == "EL" ~ "Greece",
pais == "BG" ~ "Bulgaria",
TRUE ~ pais # Mantiene los nombres que no están en la lista
))
# Crear el gráfico de barras
grafico_pib <- ggplot(pib_2022_desc_gr, aes(x = reorder(pais, -`2022`), y = `2022`)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "País", y = "Valor en 2022", title = "PIB por País en 2022") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
grafico_pib
library(dplyr)
# Calcular la media basada en la proporción de positivos
media_ganaderia <- paises_UE_df %>%
group_by(Codigo, zoonosis_name) %>%
dplyr::summarise(
media = mean((MuestraPositiva / TotalMuestras)*100, na.rm = TRUE)
) %>%
ungroup()
load("C:/Users/usuario/seminario_fuentes/OUTPUT/enviroment.RData")
library(dplyr)
# Calcular la media basada en la proporción de positivos
media_ganaderia <- paises_UE_df %>%
group_by(Codigo, zoonosis_name) %>%
dplyr::summarise(
media = mean((MuestraPositiva / TotalMuestras)*100, na.rm = TRUE)
) %>%
ungroup()
media_ganaderia$media[is.nan(media_ganaderia$media)] <- 0
lista_codigos_paises <- list("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "EL", "ES", "FI", "FR", "HR", "HU",
"IE", "IT", "LT", "LU", "LV", "MT", "NL", "PL", "PT", "RO", "SE", "SI", "SK")
otra <- otra %>%
dplyr::filter(RegionCode %in% lista_codigos_paises)
#Filtro solo las bacterias comunes y les cambio el nombre de las bacterias comunes
media_nueva<-otra %>%
filter(grupo %in% c("Ent", "Esc")) %>%
mutate(grupo = recode(grupo, "Ent" = "Enterococcus", "Esc" = "Escherichia"))
#Filtro las bacterias comunes
media_ganaderia_nueva<-media_ganaderia %>%
filter(zoonosis_name %in% c("Enterococcus,", "Escherichia")) %>%
mutate(zoonosis_name = recode(zoonosis_name, "Enterococcus," = "Enterococcus"))
table(factor(media_nueva$grupo))
table(factor(media_ganaderia_nueva$zoonosis_name))
summary(media_ganaderia_nueva)
summary(media_nueva)
#Hago un join usando de union el codigo y las bacterias comunes
library(tidyr)
library(ggplot2)
tabla_unida <- full_join(x=media_ganaderia_nueva, y= media_nueva,
by = c("Codigo" = "RegionCode", "zoonosis_name" = "grupo")) %>%
dplyr::rename(mediaGanaderia=media, mediaEnPoblacion=mean_value) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(mediaGanaderia:mediaEnPoblacion)) %>%
mutate(zoonosis_name = factor(zoonosis_name, levels = c("Escherichia","Enterococcus"))) %>%
mutate(Variable = factor(Variable, levels = c("mediaGanaderia","mediaEnPoblacion"))) %>%
drop_na()
ggplot(data = tabla_unida, aes(x = Valores, y = Codigo)) +
geom_bar(aes(fill = zoonosis_name), position = "dodge", stat = "identity") +
facet_wrap(facets = vars(Variable), nrow = 1)
# ahora sacamos tabla sencillita para unirla con los positivos en personas
positivos_animales <- media_nueva%>%
group_by(RegionCode)%>%
dplyr::summarise(media = mean(mean_value, na.rm = TRUE))
# aquí vamos a unir las tablas para sacar: similitudes de bacterias entre ganadería
# y la incidencia total (se usa el df otra)
# necesita que se cargue el archivo EU_ddd y EU_Incidencia_enfermedades
library(dplyr)
library(tidyr)
# Respuestas para la pregunta tres, Consumo y resistencia en sectores específicos en la UE.
DDD_Europa_df # consumo personas antibiótico
new # consumo ganadería antibiótico
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")%>%
mutate(DDD_per_100_inhabitants_per_year = DDD_per_100_inhabitants_per_day*365/100*100)%>%
mutate(Antibiotic_use_in_livestock_1000_PCU = Antibiotic_use_in_livestock_100_PCU)%>%
dplyr::select(-DDD_per_100_inhabitants_per_day)%>%
left_join(x = ., y = media_region, by = c("Country" = "RegionCode"))%>%
group_by(Country, mean_value_region)%>%
dplyr::rename("100 habitantes (mg)" = DDD_per_100_inhabitants_per_year, "1000 PCU (mg)" = Antibiotic_use_in_livestock_100_PCU, "Valor" = mean_value_region)%>%
pivot_longer(., names_to = "Consumo", values_to = "Dosis", cols= c(2:3))
View(new)
new <- a_e_g %>%
select(-Year)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10)%>%
#mutate(Antibiotic_day_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU/365)%>%
select(-Antibiotic_use_in_livestock_1000_PCU, -Antibiotic_use_in_livestock_100_PCU)
new <- a_e_g %>%
select(-Year)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10)%>%
#mutate(Antibiotic_day_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU/365)%>%
select(-Antibiotic_use_in_livestock_1000_PCU, -Antibiotic_use_in_livestock_100_PCU)
View(new)
a_e_g <- ant_europa_g %>%
select("Country", "...5")%>%
dplyr::rename(Antibiotic_use_in_livestock_1000_PCU = `...5`)%>%
mutate(Year = "2022")%>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czech Republic" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Germany" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Sweden" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
relocate(3, .before = 2)
new <- a_e_g %>%
select(-Year)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10)%>%
#mutate(Antibiotic_day_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU/365)%>%
select(-Antibiotic_use_in_livestock_1000_PCU, -Antibiotic_use_in_livestock_100_PCU)
View(new)
library(readr)
library(readxl)
library(dplyr)
library(tidyr)
antibioticos_europa_ganaderia <- read_csv("INPUT/DATA/antibioticos_europa_ganaderia.csv")
View(antibioticos_europa_ganaderia)
antib <- antibioticos_europa_ganaderia%>%
mutate(Entity = case_when(
Entity == "Slovakia" ~ "SK",
Entity == "Belgium" ~ "BE",
Entity == "Cyprus" ~ "CY",
Entity == "Greece" ~ "EL",
Entity == "Romania" ~ "RO",
Entity == "Bulgaria" ~ "BG",
Entity == "France" ~ "FR",
Entity == "Malta" ~ "MT",
Entity == "Poland" ~ "PL",
Entity == "Spain" ~ "ES",
Entity == "Ireland" ~ "IE",
Entity == "Italy" ~ "IT",
Entity == "Luxembourg" ~ "LU",
Entity == "Portugal" ~ "PT",
Entity == "Czechia" ~ "CZ",
Entity == "Finland" ~ "FI",
Entity == "Austria" ~ "AT",
Entity == "Germany" ~ "DE",
Entity == "Denmark" ~ "DK",
Entity == "Estonia" ~ "EE",
Entity == "Hungary" ~ "HU",
Entity == "Croatia" ~ "HR",
Entity == "Lithuania" ~ "LT",
Entity == "Latvia" ~ "LV",
Entity == "Netherlands" ~ "NL",
Entity == "Sweden" ~ "SE",
Entity == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
select(-Code)%>%
filter(Year == "2015")%>%
dplyr::rename(Country = Entity)
ant_europa_g <- read_excel("INPUT/DATA/consumo_ganaderia_2022.xlsx", skip = 3)
View(ant_europa_g)
a_e_g <- ant_europa_g %>%
select("Country", "...5")%>%
dplyr::rename(Antibiotic_use_in_livestock_1000_PCU = `...5`)%>%
mutate(Year = "2022")%>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czech Republic" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Germany" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Sweden" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
relocate(3, .before = 2)
new <- a_e_g %>%
select(-Year)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10)#%>%
#mutate(Antibiotic_day_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU/365)%>%
#select(-Antibiotic_use_in_livestock_1000_PCU, -Antibiotic_use_in_livestock_100_PCU)
new <- a_e_g %>%
select(-Year)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10)%>%
#mutate(Antibiotic_day_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU/365)%>%
select(-Antibiotic_use_in_livestock_1000_PCU)
new <- a_e_g %>%
select(-Year)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10)%>%
#mutate(Antibiotic_day_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU/365)%>%
select(-Antibiotic_use_in_livestock_1000_PCU)
View(MT_AMR_PUB.xlsx)
View(new)
# aquí vamos a unir las tablas para sacar: similitudes de bacterias entre ganadería
# y la incidencia total (se usa el df otra)
# necesita que se cargue el archivo EU_ddd y EU_Incidencia_enfermedades
library(dplyr)
library(tidyr)
# Respuestas para la pregunta tres, Consumo y resistencia en sectores específicos en la UE.
DDD_Europa_df # consumo personas antibiótico
new # consumo ganadería antibiótico
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")%>%
mutate(DDD_per_100_inhabitants_per_year = DDD_per_100_inhabitants_per_day*365/100*100)%>%
mutate(Antibiotic_use_in_livestock_1000_PCU = Antibiotic_use_in_livestock_100_PCU)%>%
dplyr::select(-DDD_per_100_inhabitants_per_day)%>%
left_join(x = ., y = media_region, by = c("Country" = "RegionCode"))%>%
group_by(Country, mean_value_region)%>%
dplyr::rename("100 habitantes (mg)" = DDD_per_100_inhabitants_per_year, "1000 PCU (mg)" = Antibiotic_use_in_livestock_100_PCU, "Valor" = mean_value_region)%>%
pivot_longer(., names_to = "Consumo", values_to = "Dosis", cols= c(2:3))
ggplot(paises_consumo_ab_sectores,aes(x=Dosis, y=Valor))+
geom_point(aes(color=factor(Consumo)))+
geom_smooth(method = 'lm',aes(colour=factor(Consumo)))+
labs(title = 'Relación entre el consumo de antibióticos y resistencia antimicrobiana',
y='Incidencia',
x= 'Consumo',
colour='Consumo en dosis')
positivos_resist_sectores<-left_join(x = media_region, y = positivos_animales, by = "RegionCode")%>%
dplyr::rename(porcentaje_posit_animales = media)%>%
dplyr::rename(porcentaje_posit_personas = mean_value_region) %>%
group_by(RegionCode) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(porcentaje_posit_personas:porcentaje_posit_animales)) %>%
mutate(Variable = factor(Variable, levels = c("porcentaje_posit_personas","porcentaje_posit_animales"))) %>%
filter(Valores!=0.00)
positivos_animales # positivo animales resistencia antibiotico
media_region # positivo personas resistencia antibiotico
# aquí separado por bacterias para unirlo con las bacterias de la ganadería para ver si hay coincidencias
# las bacterias son las que provocan que se dé positivo en resistencia
otra
library(ggplot2)
#GRAFICA DE BARRAS DE ENTRE MEDIA DE POSITIVOS EN ANIMALES Y PERSONAS
ggplot(data = positivos_resist_sectores, aes(y = Valores, x = RegionCode)) +
geom_bar(aes(fill = Variable), position = "dodge", stat = "identity")+
labs(title='Media por paises de positivos en animales y en personas',
x='Paises',
fill='Medias')+
scale_fill_manual(values = c("porcentaje_posit_personas" = 'violet',
"porcentaje_posit_animales" = "blue"))
pib_2022_desc
positivos_sinPivotar<-left_join(x = media_region, y = positivos_animales, by = "RegionCode")%>%
dplyr::rename(porcentaje_posit_animales = media)%>%
dplyr::rename(porcentaje_posit_personas = mean_value_region)
positivos_PIB<-full_join(y= pib_2022_desc ,x=positivos_sinPivotar,by=c('RegionCode'='pais')) %>%
dplyr::rename(PIB='2022') %>%
group_by(RegionCode) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(porcentaje_posit_personas:porcentaje_posit_animales)) %>%
mutate(Variable = factor(Variable, levels = c("porcentaje_posit_personas","porcentaje_posit_animales"))) %>%
filter(Valores!=0.00)
ggplot(positivos_PIB,aes(x=PIB, y=Valores))+
geom_point(aes(color=factor(Variable)))+
geom_smooth(method = 'lm',aes(colour=factor(Variable)))+
labs(title = 'Relación entre PIB y resistencia antimicrobiana',
y='positivos en AMR',
colour='poblaciones de positivos')
library(ggplot2)
library(ggiraph)
library(patchwork)
# Gráfico de dispersión interactivo (izquierda)
graf_izq_ <- ggplot(positivos_PIB, aes(x = PIB, y = Valores, tooltip = RegionCode, data_id = RegionCode)) +
geom_point_interactive(aes(color = Variable), size = 2) +  # Puntos interactivos con color por variable
geom_smooth(method = "lm",aes(color=Variable) , se = TRUE) +  # Líneas de tendencia
labs(title = "Relación entre PIB y Resistencia", x = "PIB", y = "Porcentaje de Resistencia") +
#theme_minimal() +
theme(legend.position = "none",  # Eliminar la leyenda en el gráfico de dispersión
plot.margin = margin(10, 10, 10, 10))  # Ajuste de márgenes
graf_izq <- ggplot(positivos_PIB, aes(x = PIB, y = Valores)) +
geom_point_interactive(aes(color = Variable, tooltip = RegionCode, data_id = RegionCode), size = 0.5) +
geom_smooth(aes(color = Variable), method = "lm", se = TRUE) +
labs(title = "Relación entre PIB y Resistencia", x = "PIB", y = "Porcentaje de Resistencia") +
theme(legend.position = "none", plot.margin = margin(10, 10, 10, 10))
# Gráfico de barras interactivo (derecha)
graf_drch <- ggplot(positivos_PIB, aes(x = RegionCode, y = Valores, tooltip = paste("País:", RegionCode, "<br>Valor:", Valores), data_id = RegionCode)) +
geom_col_interactive(aes(fill = Variable), position = "dodge") +  # Barras interactivas agrupadas por variable
coord_flip() +  # Invertir los ejes para barras horizontales
labs(x = "País", y = "Porcentaje de Resistencia") +
#theme_minimal() +
theme(legend.position = "right",  # Mostrar la leyenda solo en el gráfico de barras
plot.margin = margin(10, 10, 10, 10))  # Ajuste de márgenes
graficas_unidas <- girafe(ggobj = graf_izq + graf_drch + plot_layout(ncol = 2))
# Mostrar el gráfico interactivo
graficas_unidas
# aquí vamos a unir las tablas para sacar: similitudes de bacterias entre ganadería
# y la incidencia total (se usa el df otra)
# necesita que se cargue el archivo EU_ddd y EU_Incidencia_enfermedades
library(dplyr)
library(tidyr)
# Respuestas para la pregunta tres, Consumo y resistencia en sectores específicos en la UE.
DDD_Europa_df # consumo personas antibiótico
new # consumo ganadería antibiótico
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")%>%
mutate(DDD_per_100_inhabitants_per_year = DDD_per_100_inhabitants_per_day*365/100*100)%>%
mutate(Antibiotic_use_in_livestock_1000_PCU = Antibiotic_use_in_livestock_100_PCU)%>%
dplyr::select(-DDD_per_100_inhabitants_per_day)%>%
left_join(x = ., y = media_region, by = c("Country" = "RegionCode"))%>%
group_by(Country, mean_value_region)%>%
dplyr::rename("100 habitantes (mg)" = DDD_per_100_inhabitants_per_year, "1000 PCU (mg)" = Antibiotic_use_in_livestock_100_PCU, "Valor" = mean_value_region)%>%
pivot_longer(., names_to = "Consumo", values_to = "Dosis", cols= c(2:3))
ggplot(paises_consumo_ab_sectores,aes(x=Dosis, y=Valor))+
geom_point(aes(color=factor(Consumo)))+
geom_smooth(method = 'lm',aes(colour=factor(Consumo)))+
labs(title = 'Relación entre el consumo de antibióticos y resistencia antimicrobiana',
y='Incidencia',
x= 'Consumo',
colour='Consumo en dosis')
positivos_resist_sectores<-left_join(x = media_region, y = positivos_animales, by = "RegionCode")%>%
dplyr::rename(porcentaje_posit_animales = media)%>%
dplyr::rename(porcentaje_posit_personas = mean_value_region) %>%
group_by(RegionCode) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(porcentaje_posit_personas:porcentaje_posit_animales)) %>%
mutate(Variable = factor(Variable, levels = c("porcentaje_posit_personas","porcentaje_posit_animales"))) %>%
filter(Valores!=0.00)
positivos_animales # positivo animales resistencia antibiotico
media_region # positivo personas resistencia antibiotico
# aquí separado por bacterias para unirlo con las bacterias de la ganadería para ver si hay coincidencias
# las bacterias son las que provocan que se dé positivo en resistencia
otra
library(ggplot2)
#GRAFICA DE BARRAS DE ENTRE MEDIA DE POSITIVOS EN ANIMALES Y PERSONAS
ggplot(data = positivos_resist_sectores, aes(y = Valores, x = RegionCode)) +
geom_bar(aes(fill = Variable), position = "dodge", stat = "identity")+
labs(title='Media por paises de positivos en animales y en personas',
x='Paises',
fill='Medias')+
scale_fill_manual(values = c("porcentaje_posit_personas" = 'violet',
"porcentaje_posit_animales" = "blue"))
pib_2022_desc
positivos_sinPivotar<-left_join(x = media_region, y = positivos_animales, by = "RegionCode")%>%
dplyr::rename(porcentaje_posit_animales = media)%>%
dplyr::rename(porcentaje_posit_personas = mean_value_region)
positivos_PIB<-full_join(y= pib_2022_desc ,x=positivos_sinPivotar,by=c('RegionCode'='pais')) %>%
dplyr::rename(PIB='2022') %>%
group_by(RegionCode) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(porcentaje_posit_personas:porcentaje_posit_animales)) %>%
mutate(Variable = factor(Variable, levels = c("porcentaje_posit_personas","porcentaje_posit_animales"))) %>%
filter(Valores!=0.00)
ggplot(positivos_PIB,aes(x=PIB, y=Valores))+
geom_point(aes(color=factor(Variable)))+
geom_smooth(method = 'lm',aes(colour=factor(Variable)))+
labs(title = 'Relación entre PIB y resistencia antimicrobiana',
y='positivos en AMR',
colour='poblaciones de positivos')
positivos_PIB<-full_join(y= pib_2022_desc ,x=positivos_sinPivotar,by=c('RegionCode'='pais')) %>%
dplyr::rename(PIB='2022') %>%
dplyr::rename(Animales=porcentaje_posit_animales, Personas = porcentaje_posit_personas)%>%
group_by(RegionCode) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(porcentaje_posit_personas:porcentaje_posit_animales)) %>%
mutate(Variable = factor(Variable, levels = c("porcentaje_posit_personas","porcentaje_posit_animales"))) %>%
filter(Valores!=0.00)
ggplot(positivos_PIB,aes(x=PIB, y=Valores))+
geom_point(aes(color=factor(Variable)))+
geom_smooth(method = 'lm',aes(colour=factor(Variable)))+
labs(title = 'Relación entre PIB y resistencia antimicrobiana',
y='positivos en AMR',
colour='poblaciones de positivos')
positivos_PIB<-full_join(y= pib_2022_desc ,x=positivos_sinPivotar,by=c('RegionCode'='pais')) %>%
dplyr::rename(PIB='2022') %>%
dplyr::rename(Animales=porcentaje_posit_animales, Personas = porcentaje_posit_personas)%>%
group_by(RegionCode) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(Personas:Animales)) %>%
mutate(Variable = factor(Variable, levels = c("Personas","Animales"))) %>%
filter(Valores!=0.00)
ggplot(positivos_PIB,aes(x=PIB, y=Valores))+
geom_point(aes(color=factor(Variable)))+
geom_smooth(method = 'lm',aes(colour=factor(Variable)))+
labs(title = 'Relación entre PIB y resistencia antimicrobiana',
y='positivos en AMR',
colour='poblaciones de positivos')
library(ggplot2)
library(ggiraph)
library(patchwork)
# Gráfico de dispersión interactivo (izquierda)
graf_izq_ <- ggplot(positivos_PIB, aes(x = PIB, y = Valores, tooltip = RegionCode, data_id = RegionCode)) +
geom_point_interactive(aes(color = Variable), size = 2) +  # Puntos interactivos con color por variable
geom_smooth(method = "lm",aes(color=Variable) , se = TRUE) +  # Líneas de tendencia
labs(title = "Relación entre PIB y Resistencia", x = "PIB", y = "Porcentaje de Resistencia") +
#theme_minimal() +
theme(legend.position = "none",  # Eliminar la leyenda en el gráfico de dispersión
plot.margin = margin(10, 10, 10, 10))  # Ajuste de márgenes
graf_izq <- ggplot(positivos_PIB, aes(x = PIB, y = Valores)) +
geom_point_interactive(aes(color = Variable, tooltip = RegionCode, data_id = RegionCode), size = 0.5) +
geom_smooth(aes(color = Variable), method = "lm", se = TRUE) +
labs(title = "Relación entre PIB y Resistencia", x = "PIB", y = "Porcentaje de Resistencia") +
theme(legend.position = "none", plot.margin = margin(10, 10, 10, 10))
# Gráfico de barras interactivo (derecha)
graf_drch <- ggplot(positivos_PIB, aes(x = RegionCode, y = Valores, tooltip = paste("País:", RegionCode, "<br>Valor:", Valores), data_id = RegionCode)) +
geom_col_interactive(aes(fill = Variable), position = "dodge") +  # Barras interactivas agrupadas por variable
coord_flip() +  # Invertir los ejes para barras horizontales
labs(x = "País", y = "Porcentaje de Resistencia") +
#theme_minimal() +
theme(legend.position = "right",  # Mostrar la leyenda solo en el gráfico de barras
plot.margin = margin(10, 10, 10, 10))  # Ajuste de márgenes
graficas_unidas <- girafe(ggobj = graf_izq + graf_drch + plot_layout(ncol = 2))
# Crear el objeto interactivo con girafe
graficas_unidas_ <- girafe(ggobj = plot_combinado)
graficas_unidas <- girafe(ggobj = graf_izq + graf_drch + plot_layout(ncol = 2))
# Mostrar el gráfico interactivo
graficas_unidas
library(ggplot2)
library(ggiraph)
library(patchwork)
# Gráfico de dispersión interactivo (izquierda)
graf_izq <- ggplot(positivos_PIB, aes(x = PIB, y = Valores, tooltip = RegionCode, data_id = RegionCode)) +
geom_point_interactive(aes(color = Variable), size = 2) +
geom_smooth(aes(color = Variable), method = "lm", se = TRUE) +
scale_x_continuous(
limits = c(min(positivos_PIB$PIB) - 1000, max(positivos_PIB$PIB) + 1000),
breaks = seq(min(positivos_PIB$PIB), max(positivos_PIB$PIB), by = 5000)
) +
labs(title = "Relación entre PIB y Resistencia", x = "PIB", y = "Porcentaje de Resistencia") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "gray80", size = 0.8),
panel.grid.minor = element_line(color = "gray90", size = 0.5),
panel.grid.major.x = element_line(linetype = "dotted"),
panel.grid.minor.x = element_blank(),
legend.position = "none",  # Sin leyenda
plot.margin = margin(10, 10, 10, 10)
)
# Gráfico de barras interactivo (derecha)
graf_drch <- ggplot(positivos_PIB, aes(x = RegionCode, y = Valores, tooltip = paste("País:", RegionCode, "<br>Valor:", Valores), data_id = RegionCode)) +
geom_col_interactive(aes(fill = Variable), position = "dodge") +
coord_flip() +
labs(x = "País", y = "Porcentaje de Resistencia") +
theme_minimal() +
theme(
legend.position = "right",
plot.margin = margin(10, 10, 10, 10)
)
# Combinar los dos gráficos en una disposición horizontal
plot_combinado <- graf_izq + graf_drch + plot_layout(ncol = 2)
# Crear el objeto interactivo con girafe
graficas_unidas <- girafe(ggobj = plot_combinado)
# Mostrar el gráfico interactivo
graficas_unidas
ggplot(paises_consumo_ab_sectores,aes(x=Dosis, y=Valor))+
geom_point(aes(color=factor(Consumo)))+
geom_smooth(method = 'lm',aes(colour=factor(Consumo)))+
labs(title = 'Relación entre el consumo de antibióticos y resistencia antimicrobiana',
y='Incidencia',
x= 'Consumo',
colour='Consumo en dosis')
texto <- readLines("C:/Users/usuario/Downloads/summary-33348801.txt")
library(tm)
library(wordcloud)
library(RColorBrewer)
texto <- readLines("C:/Users/usuario/Downloads/summary-33348801.txt")
wordcloud2(texto, size=1.6, color='random-dark')
install.packages("wordcloud2")
library(wordcloud2)
# Basic plot
wordcloud2(data=demoFreq, size=1.6)
# Basic plot
wordcloud2(data=texto, size=1.6)
texto <- readLines("C:/Users/usuario/Downloads/summary-33348801.txt")
# Basic plot
wordcloud2(data=texto, size=1.6)
texto <- readLines("C:/Users/usuario/Downloads/The burden of emerging antimicrobia.txt")
# Basic plot
wordcloud2(data=texto, size=1.6)
plotWordCloud(cleanAbs, min.freq = 2, scale = c(2, 0.3))
texto <- readLines("C:/Users/usuario/Downloads/The burden of emerging antimicrobia.txt")
cleanAbs <- tolower(gsub("[^[:alpha:]\\s]", "", texto))  # Elimina todo lo que no sea letra o espacio
# Crear la nube de palabras
wordcloud(cleanAbs, min.freq = 2, scale = c(2, 0.3))
library(wordcloud)
library(wordcloud)
cleanAbs <- tolower(gsub("[^[:alpha:]\\s]", "", texto))  # Elimina todo lo que no sea letra o espacio
# Crear la nube de palabras
wordcloud(cleanAbs, min.freq = 2, scale = c(2, 0.3))
# Crear la nube de palabras
wordcloud(cleanAbs, min.freq = 1, scale = c(2, 0.3))
