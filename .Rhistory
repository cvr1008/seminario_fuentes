Entity == "Lithuania" ~ "LT",
Entity == "Latvia" ~ "LV",
Entity == "Netherlands" ~ "NL",
Entity == "Sweden" ~ "SE",
Entity == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
select(-Code)%>%
filter(Year == "2015")%>%
dplyr::rename(Country = Entity)
library(tidyr)
library(readr)
library(readxl)
library(dplyr)
library(tidyr)
antibioticos_europa_ganaderia <- read_csv("INPUT/DATA/antibioticos_europa_ganaderia.csv")
View(antibioticos_europa_ganaderia)
antib <- antibioticos_europa_ganaderia%>%
mutate(Entity = case_when(
Entity == "Slovakia" ~ "SK",
Entity == "Belgium" ~ "BE",
Entity == "Cyprus" ~ "CY",
Entity == "Greece" ~ "EL",
Entity == "Romania" ~ "RO",
Entity == "Bulgaria" ~ "BG",
Entity == "France" ~ "FR",
Entity == "Malta" ~ "MT",
Entity == "Poland" ~ "PL",
Entity == "Spain" ~ "ES",
Entity == "Ireland" ~ "IE",
Entity == "Italy" ~ "IT",
Entity == "Luxembourg" ~ "LU",
Entity == "Portugal" ~ "PT",
Entity == "Czechia" ~ "CZ",
Entity == "Finland" ~ "FI",
Entity == "Austria" ~ "AT",
Entity == "Germany" ~ "DE",
Entity == "Denmark" ~ "DK",
Entity == "Estonia" ~ "EE",
Entity == "Hungary" ~ "HU",
Entity == "Croatia" ~ "HR",
Entity == "Lithuania" ~ "LT",
Entity == "Latvia" ~ "LV",
Entity == "Netherlands" ~ "NL",
Entity == "Sweden" ~ "SE",
Entity == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
select(-Code)%>%
filter(Year == "2015")%>%
dplyr::rename(Country = Entity)
ant_europa_g <- read_excel("INPUT/DATA/consumo_ganaderia_2022.xlsx", skip = 3)
View(ant_europa_g)
a_e_g <- ant_europa_g %>%
select("Country", "...5")%>%
dplyr::rename(Antibiotic_use_in_livestock_1000_PCU = `...5`)%>%
mutate(Year = "2022")%>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czech Republic" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Germany" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Sweden" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
relocate(3, .before = 2)
new <- a_e_g %>%
select(-Year)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10)%>%
mutate(Antibiotic_day_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU/365)%>%
select(-Antibiotic_use_in_livestock_1000_PCU, -Antibiotic_use_in_livestock_100_PCU)
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_Json
# --------------------
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
DDD_Europa_df <- DDD_Europa_df %>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czechia" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Norway" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Iceland" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
mutate(DDD_per_100_inhabitants_per_day = DDD_per_1000_inhabitants_per_day/10)%>%
select(-DDD_per_1000_inhabitants_per_day)
# al tratarse del número de dosis estándar consumidas diariamente por cada 1000 personas, se divide entre 10 para
# que sea número de dosis diarias por cada 100 habitantes.
# resumen: el x% de la población de cada país consume antibiótico de forma diaria en el sector
# hospitalario y comunitario.
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_100_inhabitants_per_day),
y = DDD_per_100_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 100 habitantes por día en Europa",
x = "País",
y = "DDD por 100 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
# Crear el gráfico usando los datos ordenados
grafico <- ggplot(media_region, aes(x = reorder(RegionCode, -mean_value_region), y = mean_value_region)) +
geom_bar(stat = "identity", fill = "skyblue", color = "blue") +
labs(
title = "Media de Incidencia por Región (Orden Descendente)",
x = "País",
y = "Media de Incidencia"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Cargar las bibliotecas necesarias
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
filter(Time == 2022) %>%
filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
lista_codigos_paises <- list("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "EL", "ES", "FI", "FR", "HR", "HU",
"IE", "IT", "LT", "LU", "LV", "MT", "NL", "PL", "PT", "RO", "SE", "SI", "SK")
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
summarise(mean_value = mean(Value, na.rm = TRUE))%>%
filter(RegionCode %in% lista_codigos_paises)  # Calcula la media en cada grupo y desagrupa
otra$mean_value[is.nan(otra$mean_value)] <- 0
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))%>%
arrange(desc(mean_value_region))
# --------------------------------------------------------------------
# graficos positivos generales
# Crear el gráfico usando los datos ordenados
grafico <- ggplot(media_region, aes(x = reorder(RegionCode, -mean_value_region), y = mean_value_region)) +
geom_bar(stat = "identity", fill = "skyblue", color = "blue") +
labs(
title = "Media de Incidencia por Región (Orden Descendente)",
x = "País",
y = "Media de Incidencia"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Mostrar el gráfico
print(grafico)
# gráficos bacterias
boxplot_in <- ggplot(otra, aes(x = grupo, y = mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# gráfico que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(otra, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
library(readr)
library(readxl)
library(dplyr)
antibioticos_europa_ganaderia <- read_csv("INPUT/DATA/antibioticos_europa_ganaderia.csv")
antib <- antibioticos_europa_ganaderia%>%
dplyr::mutate(Entity = case_when(
Entity == "Slovakia" ~ "SK",
Entity == "Belgium" ~ "BE",
Entity == "Cyprus" ~ "CY",
Entity == "Greece" ~ "EL",
Entity == "Romania" ~ "RO",
Entity == "Bulgaria" ~ "BG",
Entity == "France" ~ "FR",
Entity == "Malta" ~ "MT",
Entity == "Poland" ~ "PL",
Entity == "Spain" ~ "ES",
Entity == "Ireland" ~ "IE",
Entity == "Italy" ~ "IT",
Entity == "Luxembourg" ~ "LU",
Entity == "Portugal" ~ "PT",
Entity == "Czechia" ~ "CZ",
Entity == "Finland" ~ "FI",
Entity == "Austria" ~ "AT",
Entity == "Germany" ~ "DE",
Entity == "Denmark" ~ "DK",
Entity == "Estonia" ~ "EE",
Entity == "Hungary" ~ "HU",
Entity == "Croatia" ~ "HR",
Entity == "Lithuania" ~ "LT",
Entity == "Latvia" ~ "LV",
Entity == "Netherlands" ~ "NL",
Entity == "Sweden" ~ "SE",
Entity == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
dplyr::select(-Code)%>%
dplyr::filter(Year == "2015")%>%
dplyr::rename(Country = Entity)
ant_europa_g <- read_excel("INPUT/DATA/consumo_ganaderia_2022.xlsx", skip = 3)
a_e_g <- ant_europa_g %>%
dplyr::select("Country", "...5")%>%
dplyr::rename(Antibiotic_use_in_livestock_1000_PCU = `...5`)%>%
dplyr::mutate(Year = "2022")%>%
dplyr::mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czech Republic" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Germany" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Sweden" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
dplyr::relocate(3, .before = 2)
new <- a_e_g %>%
dplyr::select(-Year)%>%
dplyr::mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10) %>%
dplyr::select(-Antibiotic_use_in_livestock_1000_PCU)
View(DDD_Europa_df)
View(Incidencia_enfermedades)
View(new)
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
library(leaflet)  # Para crear mapas interactivos
library(sf)       # Para trabajar con datos espaciales (sf)
library(viridis)
paises_UE_mapa <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mundo <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos y cambiamos a codigo para poder unir
mapa_mundo_europa <- mapa_mundo %>%
filter(NAME %in% paises_UE_mapa) %>%
mutate(NAME = case_when(
NAME == "Slovakia" ~ "SK",
NAME == "Belgium" ~ "BE",
NAME == "Cyprus" ~ "CY",
NAME == "Greece" ~ "EL",
NAME == "Romania" ~ "RO",
NAME == "Bulgaria" ~ "BG",
NAME == "France" ~ "FR",
NAME == "Malta" ~ "MT",
NAME == "Poland" ~ "PL",
NAME == "Spain" ~ "ES",
NAME == "Ireland" ~ "IE",
NAME == "Italy" ~ "IT",
NAME == "Luxembourg" ~ "LU",
NAME == "Portugal" ~ "PT",
NAME == "Czechia" ~ "CZ",
NAME == "Finland" ~ "FI",
NAME == "Austria" ~ "AT",
NAME == "Norway" ~ "DE",
NAME == "Denmark" ~ "DK",
NAME == "Estonia" ~ "EE",
NAME == "Hungary" ~ "HU",
NAME == "Croatia" ~ "HR",
NAME == "Lithuania" ~ "LT",
NAME == "Latvia" ~ "LV",
NAME == "Netherlands" ~ "NL",
NAME == "Iceland" ~ "SE",
NAME == "Slovenia" ~ "SI",
))
# Realizar el join usando las columnas correctas
mapa_mundo_europa <-left_join(x=mapa_mundo_europa,y=media_region, by = c("NAME" = "RegionCode")) %>%
dplyr::rename(Porcentaje_positivos=mean_value_region)
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = Porcentaje_positivos)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
# Mostrar el gráfico interactivo
mapa_interactivo
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = Porcentaje_positivos,
text = paste("País:", Country, "<br>",
"Tasa de positividad:", Porcentaje_positivos, "%"))) +#se rellena el mapa con los porcentajes positivos
scale_fill_viridis_c(option = "plasma", na.value = "gray") +#aplicamos paleta de colores
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))#para modificar y centrar el titulo
install.packages("shiny")
install.packages("shiny")
library(shiny)
library(plotly)
library(ggplot2)
# Crear datos ficticios (reemplazar con tus datos)
mapa_mundo_europa <- sf::st_read(system.file("shape/nc.shp", package="sf")) # Ejemplo de datos espaciales
mapa_mundo_europa$Country <- mapa_mundo_europa$NAME
mapa_mundo_europa$Porcentaje_positivos <- runif(nrow(mapa_mundo_europa), 0, 20)
# UI
ui <- fluidPage(
titlePanel("Selecciona un País"),
plotlyOutput("mapa"),
textOutput("pais_seleccionado")
)
# Server
server <- function(input, output, session) {
# Crear el gráfico interactivo
output$mapa <- renderPlotly({
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = Porcentaje_positivos,
text = paste("País:", Country, "<br>",
"Tasa de positividad:", Porcentaje_positivos, "%"))) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(mapa, tooltip = "text") %>%
event_register("plotly_click")  # Registra eventos de clic
})
# Manejar selección de país
output$pais_seleccionado <- renderText({
evento <- event_data("plotly_click")  # Obtiene los datos del clic
if (is.null(evento)) {
return("Haz clic en un país para seleccionarlo.")
}
pais <- evento$key  # Usa la clave del país seleccionada (debe configurarse en `key`)
paste("País seleccionado:", pais)
})
}
# Ejecutar la app
shinyApp(ui, server)
library(ggplot2)
library(plotly)
library(sf) # Para datos espaciales
library(shiny) # Para la app interactiva
# Cargar o generar datos espaciales (ejemplo con datos internos de sf)
mapa_mundo_europa <- sf::st_read(system.file("shape/nc.shp", package = "sf")) # Ejemplo de datos
mapa_mundo_europa$Country <- mapa_mundo_europa$NAME
mapa_mundo_europa$Porcentaje_positivos <- runif(nrow(mapa_mundo_europa), 0, 20)
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Selecciona un País"),
plotlyOutput("mapa"),
textOutput("pais_seleccionado")
)
# Servidor
server <- function(input, output, session) {
# Crear y renderizar el mapa interactivo
output$mapa <- renderPlotly({
# Crear el mapa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = Porcentaje_positivos)) + # Solo se especifica fill
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el mapa en interactivo con `plotly`
ggplotly(mapa, tooltip = c("fill")) %>%
layout(hoverlabel = list(bgcolor = "white")) %>%  # Mejorar la visibilidad de tooltips
event_register("plotly_click")  # Habilitar clic en el gráfico
})
# Mostrar el país seleccionado
output$pais_seleccionado <- renderText({
evento <- event_data("plotly_click") # Capturar datos del clic
if (is.null(evento)) {
return("Haz clic en un país para seleccionarlo.")
}
# Extraer el país (deberías asignar un `key` para usar nombres)
paste("País seleccionado:", evento$pointNumber) # Cambiar por `evento$key` si se define
})
}
# Ejecutar la aplicación
shinyApp(ui, server)
geom_sf(aes(fill = Porcentaje_positivos, key = Country))
geom_sf(aes(fill = Porcentaje_positivos, key = Country))
# Interfaz de usuario
ui <- fluidPage(
titlePanel("Selecciona un País"),
plotlyOutput("mapa"),
textOutput("pais_seleccionado")
)
# Servidor
server <- function(input, output, session) {
# Crear y renderizar el mapa interactivo
output$mapa <- renderPlotly({
# Crear el mapa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = Porcentaje_positivos)) + # Solo se especifica fill
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el mapa en interactivo con `plotly`
ggplotly(mapa, tooltip = c("fill")) %>%
layout(hoverlabel = list(bgcolor = "white")) %>%  # Mejorar la visibilidad de tooltips
event_register("plotly_click")  # Habilitar clic en el gráfico
})
# Mostrar el país seleccionado
output$pais_seleccionado <- renderText({
evento <- event_data("plotly_click") # Capturar datos del clic
if (is.null(evento)) {
return("Haz clic en un país para seleccionarlo.")
}
# Extraer el país (deberías asignar un `key` para usar nombres)
paste("País seleccionado:", evento$pointNumber) # Cambiar por `evento$key` si se define
})
}
# Ejecutar la aplicación
shinyApp(ui, server)
