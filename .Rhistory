theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
library(sf)
library(ggplot2)
library(plotly)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
world_map_europe <- as.data.frame(world_map %>% filter(NAME %in% paises_UE))
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
# Mostrar el gráfico interactivo
interactive_map
rlang::last_trace()
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
world_map_europe <- as.data.frame(world_map %>% filter(NAME %in% paises_UE))
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
# Mostrar el gráfico interactivo
interactive_map
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/paisesUE_datosAMR.RData")
# Cargar dplyr
library(dplyr)
library(ggplot2)
# 1. Listar los nombres de todos los dataframes que terminan en ".xlsx" (ajusta si es necesario)
nombres_dataframes <- ls(pattern = "_AMR_PUB\\.xlsx$")
# 2. Convertir los nombres a una lista de dataframes usando mget()
lista_dataframes <- mget(nombres_dataframes)
# 3. Unir todos los dataframes en uno solo usando bind_rows
df_combinado <- bind_rows(lista_dataframes, .id = "origen")
# Mostrar el dataframe combinado
print(df_combinado)
#seleccionamos las columnas que vamos a necesitar
paises_UE_df<-df_combinado%>%
select(rep_Country_name,rep_Country_code,zoonosis_name,matrix_name,totUnitsTested,totUnitsPositive,sampUnitType_name,sampType_name,MIC_name,CUTOFFVALUE)%>%
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")#filtramos las columnas que sean patogénicas
# Nuevo vector con los nombres de las columnas
nuevos_nombres <- c("NombrePais", "Codigo", "zoonosis_name","OrigenMuestra", "TotalMuestras","MuestraPositiva","Tipo_Unidad_Muestra","TipoMuestra","MIC_name","ValorCorte")  # Modifica según el número de columnas
# Asignar los nuevos nombres de las columnas al data frame
colnames(paises_UE_df) <- nuevos_nombres
#seleccionamos las columnas que vamos a necesitar
paises_UE_df<-df_combinado%>%
select(rep_Country_name,rep_Country_code,zoonosis_name,matrix_name,totUnitsTested,totUnitsPositive,sampUnitType_name,sampType_name,MIC_name,CUTOFFVALUE)%>%
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")#filtramos las columnas que sean patogénicas
View(paises_UE_df)
# Nuevo vector con los nombres de las columnas
paises_UE_df <- c("NombrePais", "Codigo", "zoonosis_name","OrigenMuestra", "TotalMuestras","MuestraPositiva","Tipo_Unidad_Muestra","TipoMuestra","MIC_name","ValorCorte")  # Modifica según el número de columnas
# Asignar los nuevos nombres de las columnas al data frame
colnames(paises_UE_df) <- paises_UE_df
#seleccionamos las columnas que vamos a necesitar
paises_UE_df<-df_combinado%>%
select(rep_Country_name,rep_Country_code,zoonosis_name,matrix_name,totUnitsTested,totUnitsPositive,sampUnitType_name,sampType_name,MIC_name,CUTOFFVALUE)%>%
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")#filtramos las columnas que sean patogénicas
# Nuevo vector con los nombres de las columnas
paises_UE <- c("NombrePais", "Codigo", "zoonosis_name","OrigenMuestra", "TotalMuestras","MuestraPositiva","Tipo_Unidad_Muestra","TipoMuestra","MIC_name","ValorCorte")  # Modifica según el número de columnas
# Asignar los nuevos nombres de las columnas al data frame
colnames(paises_UE_df) <- paises_UE
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
# Nuevo vector con los nombres de las columnas
nuevos_nombres <- c("NombrePais", "Codigo", "zoonosis_name","OrigenMuestra", "TotalMuestras","MuestraPositiva","Tipo_Unidad_Muestra","TipoMuestra","MIC_name","ValorCorte")  # Modifica según el número de columnas
# Asignar los nuevos nombres de las columnas al data frame
colnames(paises_UE_df) <- nuevos_nombres
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
world_map_europe <- as.data.frame(world_map %>% filter(NAME %in% paises_UE))
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
# Mostrar el gráfico interactivo
interactive_map
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
world_map_europe
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
world_map_europe <- as.data.frame(world_map %>% filter(NAME %in% paises_UE))
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
world_map_europe
View(world_map_europe)
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
rlang::last_trace()
print(st_geometry(world_map_europe))
world_map_europe$geometry
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
library(ggplot2)
library(plotly)
library(dplyr)
install.packages("leaflet")
library(leaflet)  # Para crear mapas interactivos
library(sf)       # Para trabajar con datos espaciales (sf)
library(viridis)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
world_map_europe <- as.data.frame(world_map %>% filter(NAME %in% paises_UE))
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
world_map_europe
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
# Mostrar el gráfico interactivo
interactive_map
interactive_map <- plot_ly(data = world_map_europe,
type = "choropleth",
locations = ~NAME,
z = ~positivity_rate,
colorscale = 'Plasma',
colorbar = list(title = "Tasa de Positividad (%)"),
text = ~NAME)
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
leaflet_map <- leaflet(data = world_map_europe) %>%
addTiles() %>%
addPolygons(
fillColor = ~viridis::viridis(1)[as.integer(cut(positivity_rate, breaks = 10))],
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste(NAME, "<br>", "Positividad: ", round(positivity_rate, 2), "%")
) %>%
addLegend(pal = viridis::viridis, values = ~positivity_rate, title = "Tasa de Positividad (%)")
# Mostrar el mapa interactivo
leaflet_map
library(leaflet)  # Para crear mapas interactivos
leaflet_map <- leaflet(data = world_map_europe) %>%
addTiles() %>%
addPolygons(
fillColor = ~viridis::viridis(1)[as.integer(cut(positivity_rate, breaks = 10))],
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste(NAME, "<br>", "Positividad: ", round(positivity_rate, 2), "%")
) %>%
addLegend(pal = viridis::viridis, values = ~positivity_rate, title = "Tasa de Positividad (%)")
library(viridis)
leaflet_map <- leaflet(data = world_map_europe) %>%
addTiles() %>%
addPolygons(
fillColor = ~viridis::viridis(1)[as.integer(cut(positivity_rate, breaks = 10))],
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste(NAME, "<br>", "Positividad: ", round(positivity_rate, 2), "%")
) %>%
addLegend(pal = viridis::viridis, values = ~positivity_rate, title = "Tasa de Positividad (%)")
print(class(world_map_europe))
# Crear el mapa interactivo con leaflet
leaflet_map <- leaflet(data = world_map_europe) %>%
addTiles() %>%
addPolygons(
fillColor = ~viridis::viridis(1)[as.integer(cut(positivity_rate, breaks = 10))],
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste(NAME, "<br>", "Positividad: ", round(positivity_rate, 2), "%")
) %>%
addLegend(pal = viridis::viridis, values = ~positivity_rate, title = "Tasa de Positividad (%)")
# Mostrar el mapa interactivo
leaflet_map
world_map_europe <- world_map %>% filter(NAME %in% paises_UE)
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
world_map_europe
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
# Mostrar el gráfico interactivo
interactive_map
View(paises_UE_df)
# Asegúrate de cargar dplyr si no lo has hecho
library(dplyr)
# Calcular la media de TotalMuestras y MuestraPositiva por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(NombrePais, zoonosis_name) %>%
summarise(
MediaTotalMuestras = mean(TotalMuestras, na.rm = TRUE),
MediaMuestraPositiva = mean(MuestraPositiva, na.rm = TRUE)
)
tipos_bacterias <- paises_UE_df %>%
distinct(zoonosis_name)
tipos_bacterias
# Asegúrate de cargar dplyr si no lo has hecho
library(dplyr)
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras/MuestraPositiva, na.rm = TRUE)) %>%
ungroup()
# Ver el resultado
print(media_bacterias)
ggplot(media_por_bacteria, aes(x = grupo, y = media_mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# Calcular la media de TotalMuestras y MuestraPositiva por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(NombrePais, zoonosis_name) %>%
summarise(
MediaTotalMuestras = mean(TotalMuestras, na.rm = TRUE),
MediaMuestraPositiva = mean(MuestraPositiva, na.rm = TRUE)
)
tipos_bacterias <- paises_UE_df %>%
distinct(zoonosis_name)
tipos_bacterias
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras/MuestraPositiva, na.rm = TRUE)) %>%
ungroup()
ggplot(media_por_bacteria, aes(x = grupo, y = media_mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
ggplot(media_bacteria, aes(x = grupo, y = media_mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
ggplot(media_bacterias, aes(x = grupo, y = media_mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_bacterias, ~media_bacterias$NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x =media_bacterias$zoonosis_name, y = MediaMuestraPositiva, color = media_bacterias$NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# Mostrar el gráfico interactivo
interactive_scatter_plot
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras/MuestraPositiva, na.rm = TRUE)) %>%
ungroup()
View(media_bacterias)
tipos_bacterias <- paises_UE_df %>%
distinct(zoonosis_name)
View(tipos_bacterias)
#seleccionamos las columnas que vamos a necesitar
paises_UE_df<-df_combinado%>%
select(rep_Country_name,rep_Country_code,zoonosis_name,matrix_name,totUnitsTested,totUnitsPositive,sampUnitType_name,sampType_name,MIC_name,CUTOFFVALUE)%>%
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")#filtramos las columnas que sean patogénicas
paises_UE_df <- df_combinado %>%
select(rep_Country_name, rep_Country_code, zoonosis_name, matrix_name,
totUnitsTested, totUnitsPositive, sampUnitType_name, sampType_name,MIC_name, CUTOFFVALUE) %>%
mutate(zoonosis_name = sub(" .*", "", zoonosis_name)) %>%  # Extraer solo la primera palabra
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")
View(paises_UE_df)
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/paisesUE_datosAMR.RData")
View(paises_UE_df)
#seleccionamos las columnas que vamos a necesitar
paises_UE_df <- df_combinado %>%
select(rep_Country_name, rep_Country_code, zoonosis_name, matrix_name,
totUnitsTested, totUnitsPositive, sampUnitType_name, sampType_name,MIC_name, CUTOFFVALUE) %>%
mutate(zoonosis_name = sub(" .*", "", zoonosis_name)) %>%  # Extraer solo la primera palabra
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")
# Nuevo vector con los nombres de las columnas
nuevos_nombres <- c("NombrePais", "Codigo", "zoonosis_name","OrigenMuestra", "TotalMuestras","MuestraPositiva","Tipo_Unidad_Muestra","TipoMuestra","MIC_name","ValorCorte")  # Modifica según el número de columnas
# Asignar los nuevos nombres de las columnas al data frame
colnames(paises_UE_df) <- nuevos_nombres
View(paises_UE_df)
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras/MuestraPositiva, na.rm = TRUE)) %>%
ungroup()
View(media_bacterias)
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras/MuestraPositiva, na.rm = TRUE)/100) %>%
ungroup()
View(paises_UE_df)
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras / MuestraPositiva, na.rm = TRUE) * 100) %>%  # Multiplicar por 100 para porcentaje
ungroup()
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = MuestraPositiva/TotalMuestras* 100) %>%  # Multiplicar por 100 para porcentaje
ungroup()
ggplot(media_bacterias, aes(x = grupo, y = media_mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
library(ggplot2)
ncidencia_keyed <- highlight_key(media_bacterias, ~media_bacterias$NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x =media_bacterias$zoonosis_name, y = MediaMuestraPositiva, color = media_bacterias$NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_bacterias, ~media_bacterias$NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x =media_bacterias$zoonosis_name, y = MediaMuestraPositiva, color = media_bacterias$NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# Mostrar el gráfico interactivo
interactive_scatter_plot
# Mostrar el gráfico interactivo
interactive_scatter_plot
View(ncidencia_keyed)
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_bacterias, ~media_bacterias$NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x =media_bacterias$zoonosis_name, y = MediaMuestraPositiva, color = media_bacterias$NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# Mostrar el gráfico interactivo
interactive_scatter_plot
