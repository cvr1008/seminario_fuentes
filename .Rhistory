library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises..JSON")
DDD_Europa_Json
View(DDD_Europa_Json)
spread_all(DDD_Europa_Json)
DDD_Europa_Json_wide <- DDD_Europa_Json %>%
pivot_wider(names_from = Columna2, values_from = value)
str(DDD_Europa_Json)
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
DDD_Europa_df
str(DDD_Europa_df)
head(DDD_Europa_df)
View(DDD_Europa_df)
library(readr)
library(dplyr)
library(ggplot2)
#--------------------------------
# "C:/Users/usuario/Downloads/tec00114_page_tabulaRRr.tsv/tec00114_page_tabulaRRr.tsv"
pibPP <- read_table("C:/Users/usuario/Downloads/tec00114_page_tabulaRRr.tsv/tec00114_page_tabulaRRr.tsv")
library(readr)
library(dplyr)
library(ggplot2)
#--------------------------------
# "INPUT/DATA/datos_pib.tsv"
pibPP <- read_table("C:/Users/usuario/Downloads/tec00114_page_tabulaRRr.tsv/tec00114_page_tabulaRRr.tsv")
library(readr)
library(dplyr)
library(ggplot2)
#--------------------------------
# "INPUT/DATA/datos_pib.tsv"
pibPP <- read_table("INPUT/DATA/datos_pib.tsv")
View(pibPP)
str(pibPP)
# Cambio de nombre columna
colnames(pibPP)[1] <- "pais"
# Nos quedamos con las últimas letras
pibPP$pais <- substr(pibPP$pais, nchar(pibPP$pais) - 1, nchar(pibPP$pais))
View(pibPP)
lista_pais <- list("BE", "BG", "CZ", "DK", "DE", "EE", "IE", "EL", "ES", "FR", "HR", "IT", "CY", "LV", "LT", "LU", "HU", "MT", "NL",
"AT", "PL", "PT", "RO", "SI", "SK", "FI", "SE")
# nos quedamos solo con los países de la UE
pib <- pibPP %>% filter(pais %in% unlist(lista_pais))
View(pib)
# quitar la columna nula
pib <- pib[, colSums(is.na(pib)) < nrow(pib)]
pib
pib_2023 <- pib %>% select(pais, `2023`)
View(pib_2023)
# ggplot del pib en el 20223 (primero lo ponemos en descendente)
pib_2023_desc <- pib_2023 %>% arrange(desc(`2023`))
# sustituir las etiquetas de los países
pib_2023_desc <- pib_2023_desc %>%
mutate(pais = case_when(
pais == "SK" ~ "Eslovaquia",
pais == "SI" ~ "Slovenia",
pais == "EE" ~ "Estonia",
pais == "MT" ~ "Malta",
pais == "LV" ~ "Latvia",
pais == "HR" ~ "Croatia",
pais == "EL" ~ "Greece",
pais == "BG" ~ "Bulgaria",
TRUE ~ pais # Mantiene los nombres que no están en la lista
))
# Cargar ggplot2
# Crear el gráfico de barras
grafico_pib <- ggplot(pib_2023_desc, aes(x = reorder(pais, -`2023`), y = `2023`)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "País", y = "Valor en 2023", title = "PIB por País en 2023") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
grafico_pib
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = 'Country', y = `DDD_per_1000_inhabitants_per_day`)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "País", y = "DDD", title = "DDD antibioticos al día") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
# --------------------
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# Verificar la estructura del nuevo dataframe
str(DDD_Europa_df)
# Mostrar las primeras filas del dataframe
head(DDD_Europa_df)
View(DDD_Europa_df)
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = 'Country', y = `DDD_per_1000_inhabitants_per_day`)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "País", y = "DDD", title = "DDD antibioticos al día") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
grafico_DDD
library(ggplot2)
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = 'Country', y = `DDD_per_1000_inhabitants_per_day`)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "País", y = "DDD", title = "DDD antibioticos al día") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
grafico_DDD
# --------------------
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# Verificar la estructura del nuevo dataframe
str(DDD_Europa_df)
# Mostrar las primeras filas del dataframe
head(DDD_Europa_df)
View(DDD_Europa_df)
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = 'Country', y = `DDD_per_1000_inhabitants_per_day`)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "País", y = "DDD", title = "DDD antibioticos al día") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
grafico_DDD
ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_1000_inhabitants_per_day),
y = DDD_per_1000_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "DDD por 1000 habitantes por día en Europa",
x = "País",
y = "DDD por 1000 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_1000_inhabitants_per_day),
y = DDD_per_1000_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 1000 habitantes por día en Europa",
x = "País",
y = "DDD por 1000 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_1000_inhabitants_per_day),
y = DDD_per_1000_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 1000 habitantes por día en Europa",
x = "País",
y = "DDD por 1000 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
library(tidyverse)
library(rjson)
library(tidyjson)
library(dplyr)
consumo_J01 <- fromJSON(file = "INPUT/DATA/consumo_ATC_J01_sectorHospitalario_vs_sectorComunitario_2022.JSON")
consumo_J01
View(consumo_J01)
spread_all(consumo_J01) %>% View()
consumo_J01 %>%
gather_object %>%
json_types %>%
count(name, type)
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
spread_all(consumo_J01) %>% View()
consumo_J01_df <- do.call(rbind, lapply(consumo_J01, function(x) {
data.frame(Country = x$Country,
Community_2022 = as.numeric(x$`Community, 2022`))
}))
consumo_J01_df
View(consumo_J01_df)
consumo_J01_df <- do.call(rbind, lapply(consumo_J01, function(x) {
data.frame(Country = x$Country,
Community_2022 = as.numeric(x$`Community, 2022`),
Hospital_sector_2022 = as.numeric(x$`Hospital sector, 2022`))
}))
View(consumo_J01_df)
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises..JSON")
DDD_Europa_Json
View(DDD_Europa_Json)
str(DDD_Europa_Json)
# --------------------
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# Verificar la estructura del nuevo dataframe
str(DDD_Europa_df)
# Mostrar las primeras filas del dataframe
head(DDD_Europa_df)
View(DDD_Europa_df)
<<<<<<< HEAD
>>>>>>> 28f9df4ac7fc4ff874acff051a4469e4ab262140
=======
library(readr)
library(dplyr)
library(ggplot2)
tipo_ccaa_consumo_o_no <- read_delim("C:/CLASE/practicas_fuentes/datos_ccaa/tipo_ccaa_consumo_o_no.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
tipo_ccaa_consumo_o_no <- read_delim("C:/CLASE/practicas_fuentes/datos_ccaa/tipo_ccaa_consumo_o_no.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library(pxR)
library(readr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Leer el archivo .px
archivo_px <- read.px("C:/Users/usuario/seminario_fuentes/INPUT/DATA/datos_ccaa/tipo_ccaa_recetado_o_no.px")
df_px <- as.data.frame(archivo_px)
# Ver las primeras filas
head(df_px)
View(df_px)
# quedarme solo con los antibióticos
antibioticos <- df_px[df_px[["Tipo.de.medicamento"]] == "Antibióticos" & df_px$`Sexo` == "Ambos sexos", ]
antibioticos
View(antibioticos)
# qué comunidad autónoma se automedica más
antibioticos_sin_receta <- antibioticos[antibioticos$`Recetado` == "No recetado",]
antibioticos_sin_receta
View(antibioticos_sin_receta)
antibioticos_sin_receta <- antibioticos_sin_receta %>%
filter(value != 0)
consumo_comunidades <- antibioticos_sin_receta %>%
group_by(`Comunidad.autónoma`) %>%
summarise(Total_Consumo = sum(as.numeric(value), na.rm = TRUE)) %>%
arrange(desc(Total_Consumo))
consumo_comunidades
ggplot(consumo_comunidades, aes(x = "", y = Total_Consumo, fill = `Comunidad.autónoma`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Consumo de Antibióticos por Comunidad Autónoma",
fill = "Comunidad Autónoma") +
theme_void()  # Elimina el fondo y los ejes
ggplot(consumo_comunidades, aes(x = "", y = Total_Consumo, fill = `Comunidad.autónoma`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Consumo de Antibióticos por Comunidad Autónoma",
fill = "Comunidad Autónoma")
rlang::last_trace()
View(consumo_comunidades)
# qué comunidad autónoma se automedica más
antibioticos_sin_receta <- antibioticos[antibioticos$`Recetado` == "No recetado",]
antibioticos_sin_receta
View(antibioticos_sin_receta)
antibioticos_sin_receta <- antibioticos_sin_receta %>%
filter(value != 0)
consumo_comunidades <- antibioticos_sin_receta %>%
group_by(`Comunidad.autónoma`) %>%
#summarise(Total_Consumo = sum(as.numeric(value), na.rm = TRUE)) %>%
arrange(desc(Total_Consumo))
consumo_comunidades <- antibioticos_sin_receta %>%
group_by(`Comunidad.autónoma`) %>%
#summarise(Total_Consumo = sum(as.numeric(value), na.rm = TRUE)) %>%
arrange(desc(value))
consumo_comunidades
View(consumo_comunidades)
ggplot(consumo_comunidades, aes(x = "", y = Total_Consumo, fill = `Comunidad.autónoma`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Consumo de Antibióticos por Comunidad Autónoma",
fill = "Comunidad Autónoma") +
theme_void()  # Elimina el fondo y los ejes
ggplot(consumo_comunidades, aes(x = "", y = value, fill = `Comunidad.autónoma`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Consumo de Antibióticos por Comunidad Autónoma",
fill = "Comunidad Autónoma") +
theme_void()  # Elimina el fondo y los ejes
library(readr)
library(dplyr)
AMR_2023_Interactive_dashboard_1 <- read_csv("C:/Users/usuario/seminario_fuentes/INPUT/DATA/AMR - 2023 Interactive dashboard_1.txt")
View(AMR_2023_Interactive_dashboard_1)
library(tidyjson)
library(tidyverse)
library(rjson)
library(tidyjson)
library(dplyr)
# teniendo el archivo DDD este no es necesario, no sirve
consumo_J01 <- fromJSON(file = "INPUT/DATA/consumo_ATC_J01_sectorHospitalario_vs_sectorComunitario_2022.JSON")
consumo_J01
View(consumo_J01)
head(consumo_J01)
spread_all(consumo_J01) %>% View()
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises..JSON")
DDD_Europa_Json
View(DDD_Europa_Json)
# --------------------
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# Verificar la estructura del nuevo dataframe
str(DDD_Europa_df)
# Mostrar las primeras filas del dataframe
head(DDD_Europa_df)
View(DDD_Europa_df)
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_1000_inhabitants_per_day),
y = DDD_per_1000_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 1000 habitantes por día en Europa",
x = "País",
y = "DDD por 1000 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
library(readr)
library(dplyr)
library(ggplot2)
#--------------------------------
# "INPUT/DATA/datos_pib.tsv"
pibPP <- read_table("INPUT/DATA/datos_pib.tsv")
View(pibPP)
# Cambio de nombre columna
colnames(pibPP)[1] <- "pais"
# Nos quedamos con las últimas letras
pibPP$pais <- substr(pibPP$pais, nchar(pibPP$pais) - 1, nchar(pibPP$pais))
View(pibPP)
lista_pais <- list("BE", "BG", "CZ", "DK", "DE", "EE", "IE", "EL", "ES", "FR", "HR", "IT", "CY", "LV", "LT", "LU", "HU", "MT", "NL",
"AT", "PL", "PT", "RO", "SI", "SK", "FI", "SE")
pib <- pibPP %>% filter(pais %in% unlist(lista_pais))
View(pib)
pib <- pib[, colSums(is.na(pib)) < nrow(pib)]
pib
pib_2023 <- pib %>% select(pais, `2023`)
View(pib_2023)
pib_2023_desc <- pib_2023 %>% arrange(desc(`2023`))
pib_2023_desc <- pib_2023_desc %>%
mutate(pais = case_when(
pais == "SK" ~ "Eslovaquia",
pais == "SI" ~ "Slovenia",
pais == "EE" ~ "Estonia",
pais == "MT" ~ "Malta",
pais == "LV" ~ "Latvia",
pais == "HR" ~ "Croatia",
pais == "EL" ~ "Greece",
pais == "BG" ~ "Bulgaria",
TRUE ~ pais # Mantiene los nombres que no están en la lista
))
# Crear el gráfico de barras
grafico_pib <- ggplot(pib_2023_desc, aes(x = reorder(pais, -`2023`), y = `2023`)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "País", y = "Valor en 2023", title = "PIB por País en 2023") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
grafico_pib
library(readr)
library(dplyr)
library(ggplot2)
tipo_ccaa_consumo_o_no <- read_delim("INPUT/DATA/datos_ccaa/tipo_ccaa_consumo_o_no.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(tipo_ccaa_consumo_o_no)
typeof(tipo_ccaa_consumo_o_no)
class(tipo_ccaa_consumo_o_no)
antibioticos <- tipo_ccaa_consumo_o_no %>%
filter(`Tipo de medicamento` == "Antibióticos")
antibioticos <- tipo_ccaa_consumo_o_no[tipo_ccaa_consumo_o_no$`Tipo de medicamento` == "Antibióticos" & tipo_ccaa_consumo_o_no$`Sexo` == "Ambos sexos",]
antibioticos
View(antibioticos)
antibioticos_si <- antibioticos[antibioticos$`Sí o no` == "Sí",]
antibioticos_si
View(antibioticos_si)
antibioticos_si$Total <- gsub(",", ".", antibioticos_si$Total)
# Limpia espacios y caracteres no numéricos (si es necesario)
antibioticos_si$Total <- gsub(" ", "", antibioticos_si$Total)
# Convierte a numérico
antibioticos_si$Total <- as.numeric(antibioticos_si$Total)
# Revisa si hay NA después de la conversión
sum(is.na(antibioticos_si$Total))  # Muestra el número de NAs
consumo_comunidades <- antibioticos_si %>%
group_by(`Comunidades y Ciudades Autónomas`) %>%
summarise(Total_Consumo = sum(as.numeric(Total), na.rm = TRUE)) %>%
arrange(desc(Total_Consumo))
consumo_comunidades
c_c_final <- consumo_comunidades %>%
mutate(`Comunidades y Ciudades Autónomas` = ifelse(is.na(`Comunidades y Ciudades Autónomas`), "Total País", `Comunidades y Ciudades Autónomas`))
c_c_final
consumo_comunidades <- antibioticos_si %>%
group_by(`Comunidades y Ciudades Autónomas`) %>%
summarise(Total_Consumo = sum(as.numeric(Total), na.rm = TRUE)) %>%
arrange(desc(Total_Consumo))
consumo_comunidades
c_c_final <- consumo_comunidades %>%
mutate(`Comunidades y Ciudades Autónomas` = ifelse(is.na(`Comunidades y Ciudades Autónomas`), "Total País", `Comunidades y Ciudades Autónomas`))
c_c_final
# Crear el gráfico de barras
ggplot(c_c_final, aes(x = reorder(`Comunidades y Ciudades Autónomas`, -Total_Consumo), y = Total_Consumo)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Comunidades Autónomas", y = "Total Consumo", title = "Consumo de antibióticos por Comunidad Autónoma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
antibioticos_si$Total <- gsub(",", ".", antibioticos_si$Total)
# Limpia espacios y caracteres no numéricos (si es necesario)
antibioticos_si$Total <- gsub(" ", "", antibioticos_si$Total)
# Convierte a numérico
antibioticos_si$Total <- as.numeric(antibioticos_si$Total)
# Revisa si hay NA después de la conversión
sum(is.na(antibioticos_si$Total))  # Muestra el número de NAs
consumo_comunidades <- antibioticos_si %>%
group_by(`Comunidades y Ciudades Autónomas`) %>%
summarise(Total_Consumo = sum(as.numeric(Total), na.rm = TRUE)) %>%
arrange(desc(Total_Consumo))
consumo_comunidades
c_c_final <- consumo_comunidades %>%
mutate(`Comunidades y Ciudades Autónomas` = ifelse(is.na(`Comunidades y Ciudades Autónomas`), "Total País", `Comunidades y Ciudades Autónomas`))
c_c_final
# Crear el gráfico de barras
ggplot(c_c_final, aes(x = reorder(`Comunidades y Ciudades Autónomas`, -Total_Consumo), y = Total_Consumo)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Comunidades Autónomas", y = "Total Consumo", title = "Consumo de antibióticos por Comunidad Autónoma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readr)
library(dplyr)
library(ggplot2)
tipo_ccaa_consumo_o_no <- read_delim("INPUT/DATA/datos_ccaa/tipo_ccaa_consumo_o_no.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(tipo_ccaa_consumo_o_no)
typeof(tipo_ccaa_consumo_o_no)
class(tipo_ccaa_consumo_o_no)
antibioticos <- tipo_ccaa_consumo_o_no %>%
filter(`Tipo de medicamento` == "Antibióticos")
antibioticos <- tipo_ccaa_consumo_o_no[tipo_ccaa_consumo_o_no$`Tipo de medicamento` == "Antibióticos" & tipo_ccaa_consumo_o_no$`Sexo` == "Ambos sexos",]
antibioticos
View(antibioticos)
antibioticos_si <- antibioticos[antibioticos$`Sí o no` == "Sí",]
antibioticos_si
View(antibioticos_si)
antibioticos_si$Total <- gsub(",", ".", antibioticos_si$Total)
# Limpia espacios y caracteres no numéricos (si es necesario)
antibioticos_si$Total <- gsub(" ", "", antibioticos_si$Total)
# Convierte a numérico
antibioticos_si$Total <- as.numeric(antibioticos_si$Total)
# Revisa si hay NA después de la conversión
sum(is.na(antibioticos_si$Total))  # Muestra el número de NAs
consumo_comunidades <- antibioticos_si %>%
group_by(`Comunidades y Ciudades Autónomas`) %>%
summarise(Total_Consumo = sum(as.numeric(Total), na.rm = TRUE)) %>%
arrange(desc(Total_Consumo))
consumo_comunidades
c_c_final <- consumo_comunidades %>%
mutate(`Comunidades y Ciudades Autónomas` = ifelse(is.na(`Comunidades y Ciudades Autónomas`), "Total País", `Comunidades y Ciudades Autónomas`))
consumo_comunidades
consumo_comunidades <- antibioticos_si %>%
group_by(`Comunidades y Ciudades Autónomas`) %>%
#summarise(Total_Consumo = sum(as.numeric(Total), na.rm = TRUE)) %>%
arrange(desc(Total))
consumo_comunidades
c_c_final <- consumo_comunidades %>%
mutate(`Comunidades y Ciudades Autónomas` = ifelse(is.na(`Comunidades y Ciudades Autónomas`), "Total País", `Comunidades y Ciudades Autónomas`))
c_c_final
# Crear el gráfico de barras
ggplot(c_c_final, aes(x = reorder(`Comunidades y Ciudades Autónomas`, -Total_Consumo), y = Total_Consumo)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Comunidades Autónomas", y = "Total Consumo", title = "Consumo de antibióticos por Comunidad Autónoma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Crear el gráfico de barras
ggplot(c_c_final, aes(x = reorder(`Comunidades y Ciudades Autónomas`, -Total), y = Total)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Comunidades Autónomas", y = "Total Consumo", title = "Consumo de antibióticos por Comunidad Autónoma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(pxR)
library(readr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Leer el archivo .px
archivo_px <- read.px("C:/Users/usuario/seminario_fuentes/INPUT/DATA/datos_ccaa/tipo_ccaa_recetado_o_no.px")
df_px <- as.data.frame(archivo_px)
# Ver las primeras filas
head(df_px)
View(df_px)
# quedarme solo con los antibióticos
antibioticos <- df_px[df_px[["Tipo.de.medicamento"]] == "Antibióticos" & df_px$`Sexo` == "Ambos sexos", ]
antibioticos
View(antibioticos)
# qué comunidad autónoma se automedica más
antibioticos_sin_receta <- antibioticos[antibioticos$`Recetado` == "No recetado",]
antibioticos_sin_receta
View(antibioticos_sin_receta)
antibioticos_sin_receta <- antibioticos_sin_receta %>%
filter(value != 0)
consumo_comunidades <- antibioticos_sin_receta %>%
group_by(`Comunidad.autónoma`) %>%
#summarise(Total_Consumo = sum(as.numeric(value), na.rm = TRUE)) %>%
arrange(desc(value))
consumo_comunidades
View(consumo_comunidades)
ggplot(consumo_comunidades, aes(x = "", y = value, fill = `Comunidad.autónoma`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Consumo de Antibióticos por Comunidad Autónoma",
fill = "Comunidad Autónoma") +
theme_void()  # Elimina el fondo y los ejes
View(df_px)
View(antibioticos)
consumo_comunidades <- antibioticos_sin_receta %>%
group_by(`Comunidad.autónoma`) %>%
#summarise(Total_Consumo = sum(as.numeric(value), na.rm = TRUE)) %>%
arrange(desc(value))
consumo_comunidades
View(consumo_comunidades)
>>>>>>> fa619679b8b0ef222d841f7208f5a598d7b5fec3
