Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czechia" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Norway" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Iceland" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
mutate(DDD_per_1000_inhabitants_per_day = DDD_per_1000_inhabitants_per_day/10)
DDD_Europa_df <- DDD_Europa_df %>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czechia" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Norway" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Iceland" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
mutate(DDD_per_1000_inhabitants_per_day = DDD_per_1000_inhabitants_per_day/10)
DDD_Europa_df <- DDD_Europa_df %>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czechia" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Norway" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Iceland" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
mutate(DDD_per_1000_inhabitants_per_day = DDD_per_1000_inhabitants_per_day/10)
View(DDD_Europa_df)
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_Json
# --------------------
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
View(DDD_Europa_df)
DDD_Europa_df <- DDD_Europa_df %>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czechia" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Norway" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Iceland" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
mutate(DDD_per_1000_inhabitants_per_day = DDD_per_1000_inhabitants_per_day/10)
View(DDD_Europa_df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
DDD_Europa_df <- DDD_Europa_df %>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czechia" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Norway" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Iceland" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
mutate(DDD_per_1000_inhabitants_per_day = DDD_per_1000_inhabitants_per_day/10)
load("C:/Users/usuario/seminario_fuentes/OUTPUT/enviroment.RData")
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/enviroment.RData")
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
summarise(mean_value = mean(Value, na.rm = TRUE))%>%
filter(RegionCode %in% lista_codigos_paises)  # Calcula la media en cada grupo y desagrupa
library(ggplot2)
# Cargar las bibliotecas necesarias
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
summarise(mean_value = mean(Value, na.rm = TRUE))%>%
filter(RegionCode %in% lista_codigos_paises)  # Calcula la media en cada grupo y desagrupa
View(otra)
# Calcular la media basada en la proporción de positivos
media_ganaderia <- paises_UE_df %>%
group_by(Codigo, zoonosis_name) %>%
summarise(
media = mean((MuestraPositiva / TotalMuestras)*100, na.rm = TRUE)
) %>%
ungroup()
media_ganaderia$media[is.nan(media_ganaderia$media)] <- 0
View(media_ganaderia)
table(factor(media_ganaderia$zoonosis_name))
table(factor(otra$grupo))
str(otra)
summarise(otra)
summarise(media_ganaderia)
levels(otra$grupo)
levels(otra$RegionCode)
library(rdflib)
library(dplyr)
library(tidyr)
library(tibble)
library(jsonld)
Species <- read_csv("C:/Users/usuario/Downloads/Species_Richness_PerSite.csv", col_types = cols(
ID = col_integer(),
Island = readr::col_factor(levels = c("Pinzón", "Santa Cruz", "Santa Fé", "Seymour")),
Latitude.South = col_double(),
Longitude.West = col_double(),
Station = readr::col_factor(levels = c("North", "West", "South", "East")),
distance = readr::col_factor(levels = NULL),
NewFactor = readr::col_factor(levels = NULL),
SpeciesRichness = readr::col_integer()
))
Mean_Galapagos <- read_csv(file = "C:/Users/usuario/Downloads/Galapagos_summary.csv",
col_types = cols(
Island = readr::col_factor(levels = NULL),
Station = readr::col_factor(levels = NULL),
distance = readr::col_factor(levels = NULL),
Av_Temp = col_double(),
Av_Salinity = col_double(),
Av_Chla = col_double()
))
library(readr)
Species <- read_csv("C:/Users/usuario/Downloads/Species_Richness_PerSite.csv", col_types = cols(
ID = col_integer(),
Island = readr::col_factor(levels = c("Pinzón", "Santa Cruz", "Santa Fé", "Seymour")),
Latitude.South = col_double(),
Longitude.West = col_double(),
Station = readr::col_factor(levels = c("North", "West", "South", "East")),
distance = readr::col_factor(levels = NULL),
NewFactor = readr::col_factor(levels = NULL),
SpeciesRichness = readr::col_integer()
))
Mean_Galapagos <- read_csv(file = "C:/Users/usuario/Downloads/Galapagos_summary.csv",
col_types = cols(
Island = readr::col_factor(levels = NULL),
Station = readr::col_factor(levels = NULL),
distance = readr::col_factor(levels = NULL),
Av_Temp = col_double(),
Av_Salinity = col_double(),
Av_Chla = col_double()
))
obj<-left_join(x= Mean_Galapagos, y = Species, by = c("Island", "Station", "distance"))
View(obj)
obj %>%
group_by(Island, distance)
obj %>%
group_by(Island, distance)%>%
summarise(media = mean(Av_Chla, na.rm = TRUE))
obj %>%
group_by(Island, distance)%>%
summarise(media = mean(Av_Chla, na.rm = TRUE), especies = mean(SpeciesRichness, na.rm = TRUE))
obj %>%
#group_by(Island, distance)%>%
summarise(media = mean(Av_Chla, na.rm = TRUE), especies = mean(SpeciesRichness, na.rm = TRUE))
nuevo<-obj %>%
group_by(Island, distance)%>%
summarise(media = mean(Av_Chla, na.rm = TRUE), especies = mean(SpeciesRichness, na.rm = TRUE))
View(nuevo)
ggplot(data = nuevo, aes(x=media, y = especies))
library(ggplot2)
ggplot(data = nuevo, aes(x=media, y = especies))
# HASTA AQUI Lunes 20 Noviembre #
# Agregamos una línea de ajuste
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = nuevo, aes(x=media, y = especies)+
geom_smooth())
ggplot(data = nuevo, aes(x=media, y = especies)+
geom_smooth())
geom_smooth(colour = red)
geom_smooth(colour = "red")
ggplot(data = nuevo, aes(x=media, y = especies)+
ggplot(data = nuevo, aes(x=media, y = especies)+
ggplot(data = nuevo, aes(x=media, y = especies)+
geom_point(aes(colour= factor(Island))
ggplot(data = nuevo, aes(x=media, y = especies)+
ggplot(data = nuevo, aes(x=media, y = especies)+
ggplot(data = nuevo, aes(x=media, y = especies)+
ggplot(data = nuevo, aes(x=media, y = especies) +
geom_point(aes(colour = factor(Island)))
ggplot(data = nuevo, aes(x=media, y = especies) +
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island)))
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth()
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth(colour = "red")
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth(colour = "red") +
xlab = "Promedio Clorofila" +
ylab = "Promedio Especies"
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth(colour = "red") +
xlab = ("Promedio Clorofila") +
ylab = ("Promedio Especies")
# Controlando cada etiqueta por sí sola (ejes)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
xlab("Displacement (Litres)") +
ylab("Yield (miles / gallon)")
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island)) +
geom_smooth(colour = "red") +
xlab = ("Promedio Clorofila") +
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth(colour = "red") +
xlab = ("Promedio Clorofila") +
ylab = ("Promedio Especies")
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth(colour = "red") +
xlab("Promedio Clorofila") +
ylab("Promedio Especies")
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth(colour = "red") +
xlab("Promedio Clorofila") +
ylab("Promedio Especies") +
theme_void()
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth(colour = "red") +
xlab("Promedio Clorofila") +
ylab("Promedio Especies") +
theme_minimal()
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth(colour = "red") +
xlab("Promedio Clorofila") +
ylab("Promedio Especies") +
theme_classic()
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = factor(Island))) +
geom_smooth(colour = "red") +
xlab("Promedio Clorofila") +
ylab("Promedio Especies") +
theme_light()
ggplot(data = nuevo, aes(x=media, y = especies)) +
geom_point(aes(colour = Island)) +
geom_smooth(colour = "red") +
xlab("Promedio Clorofila") +
ylab("Promedio Especies") +
theme_light()
starwars
starwars
date(starwars)
data("starwars")
library("dplyr")
data("starwars")
starwars
starwars%>%
starwars%>%
starwars %>%
View(starwars)
View(starwars)
starwars %>%
group_by(gender)
starwars %>%
group_by(gender)%>%
mutate(height_metros = height/100)
otro<-starwars %>%
group_by(gender)%>%
mutate(height_metros = height/100)
View(otro)
otro<-starwars %>%
group_by(gender)%>%
mutate(height_metros = height/100)%>%
mutate(IMC= mass/(height_metros)^2)%>%
select(IMC, everything())
View(otro)
?summary
ult<- otro%>%
summary(media = mean(IMC, na.rm = TRUE), desv_est = sd(IMC, na.rm =TRUE))
ult
otro<-starwars %>%
group_by(gender)%>%
mutate(height_metros = height/100)%>%
mutate(IMC= mass/(height_metros)^2)%>%
select(desc(IMC), everything())
otro<-starwars %>%
group_by(gender)%>%
mutate(height_metros = height/100)%>%
mutate(IMC= mass/(height_metros)^2)%>%
select(IMC, everything())
ult<- otro%>%
arrange(desc(IMC))
View(ult)
ult<- otro%>%
arrange(desc(IMC))%>%
summarise(media = mean(IMC, na.rm = TRUE), desv_est = sd(IMC, na.rm =TRUE))
View(ult)
last<-ult%>%
filter(if(is.na(gender)))
levels(starwars$gender)
last<-ult%>%
rename_with(otro, ends_with(NA))
last<-ult%>%
rename_with(otro, ends_with("NA"))
last<-ult%>%
rename_with("otro", ends_with("NA"))
last<-ult%>%
filter(gender != is.na())
last<-ult%>%
filter(!is.na(gender))
View(last)
library(readr)
Control_2_Grupo_101 <- read_csv("C:/Users/usuario/Downloads/Control 2 Grupo 101.csv")
View(Control_2_Grupo_101)
library(readr)
Control_2_Grupo_101_1_ <- read_csv("C:/Users/usuario/Downloads/Control 2 Grupo 101 (1).csv")
View(Control_2_Grupo_101_1_)
library(readr)
pacientes <- read_csv("C:/Users/usuario/Downloads/Control 2 Grupo 101.csv")
View(pacientes)
registros <- read_csv("C:/Users/usuario/Downloads/Control 2 Grupo 101 (1).csv")
View(registros)
uno <- left_join(x =registros, y = pacientes, by ("id"))
uno <- left_join(x =registros, y = pacientes, by ("ID_Paciente"))
uno <- left_join(x =registros, y = pacientes, by=  ("ID_Paciente"))
View(uno)
l <- uno%>%
filter(ID_Paciente = 1 | ID_Paciente = 2)
l <- uno%>%
filter(ID_Paciente == 1 | ID_Paciente == 2)
View(l)
h<- l %>%
select(Tiempo, Valor_Glucosa, Valor_Presion)
View(h)
?ggplot
?ggplot
?ggplot
library(ggplot2)
?ggplot
h<- l %>%
select(Nombre, Tiempo, Valor_Glucosa, Valor_Presion)
ggplot(data = h, aes(x = Nombre, y = (Valor_Glucosa, Valor_Presion)))
ggplot(data = h, aes(x = Nombre, y = Valor_Glucosa))
uno <- left_join(x =registros, y = pacientes, by=  ("ID_Paciente"))
h<- uno %>%
select(Nombre, Tiempo, Valor_Glucosa, Valor_Presion)
ggplot(data = h, aes(x = Nombre, y = Valor_Glucosa))
ggplot(data = h, aes(x = Nombre, y = Valor_Glucosa))
ggplot(data = h, aes(x = Nombre, y = Valor_Glucosa))+
ggplot(data = h, aes(x = Nombre, y = Valor_Glucosa))+
ggplot(data = h, aes(x = Nombre, y = Valor_Glucosa))+
geom_point(aes(colour = factor(Valor_Gucosa), shape = Tiempo))+
geom_point(aes(colour = factor(Valor_Presion), shape = Tiempo)) +
xlab("Pacientes")+
ylab("Valor del registro")
h<- uno %>%
select(Nombre, Tiempo, Valor_Glucosa, Valor_Presion)
library(ggplot2)
?ggplot
ggplot(data = h, aes(x = Nombre, y = Valor_Glucosa))+
geom_point(aes(colour = factor(Valor_Gucosa), shape = Tiempo))+
geom_point(aes(colour = factor(Valor_Presion), shape = Tiempo)) +
xlab("Pacientes")+
ylab("Valor del registro")
library(readr)
pacientes <- read_csv("C:/Users/usuario/Downloads/Control 2 Grupo 101.csv")
View(pacientes)
registros <- read_csv("C:/Users/usuario/Downloads/Control 2 Grupo 101 (1).csv")
View(registros)
uno <- left_join(x =registros, y = pacientes, by=  ("ID_Paciente"))
h<- uno %>%
select(Nombre, Tiempo, Valor_Glucosa, Valor_Presion)
View(h)
library(ggplot2)
?ggplot
ggplot(data = h, aes(x = Nombre, y = Valor_Glucosa))+
geom_point(aes(colour = factor(Valor_Gucosa), shape = Tiempo))+
geom_point(aes(colour = factor(Valor_Presion), shape = Tiempo)) +
xlab("Pacientes")+
ylab("Valor del registro")
library(dplyr)
library(readr)
library("dplyr")
data("starwars")
starwars
otro<-starwars %>%
group_by(gender)%>%
mutate(height_metros = height/100)%>%
mutate(IMC= mass/(height_metros)^2)%>%
select(IMC, everything())
?summary
ult<- otro%>%
arrange(desc(IMC))%>%
summarise(media = mean(IMC, na.rm = TRUE), desv_est = sd(IMC, na.rm =TRUE))
levels(starwars$gender)
last<-ult%>%
filter(!is.na(gender))
View(last)
