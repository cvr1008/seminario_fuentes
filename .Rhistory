scale_fill_manual(values = c("Personas" = 'violet',
"Animales" = "blue")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
positivos_animales <- bacterias_personas%>%
group_by(RegionCode)%>%
dplyr::summarise(media = mean(mean_value, na.rm = TRUE))
positivos_resist_sectores<-left_join(x = media_region, y = positivos_animales, by = "RegionCode")%>%
dplyr::rename(Animales = media)%>%
dplyr::rename(Personas = mean_value_region) %>%
arrange(desc(Personas))%>%
group_by(RegionCode) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(Personas:Animales)) %>%
mutate(Variable = factor(Variable, levels = c("Personas","Animales"))) %>%
filter(Valores!=0.00)
#GRAFICA DE BARRAS DE ENTRE MEDIA DE POSITIVOS EN ANIMALES Y PERSONAS
ggplot(data = positivos_resist_sectores, aes(y = Valores, x = RegionCode)) +
geom_bar(aes(fill = Variable), position = "dodge", stat = "identity")+
labs(title='Media por paises de positivos en animales y en personas',
x='Paises',
fill='% medio positivos')+
scale_fill_manual(values = c("Personas" = 'violet',
"Animales" = "blue")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
library(httr)
library(jsonlite)
library(patchwork)
library(pxR)
library(plotly)
library(RColorBrewer)
library(readr)
library(readxl)
library(rjson)
library(rlang)
library(sf)
library(tidyr)
library(tidyverse)
library(viridis)
load("OUTPUT/enviroment.RData")
library(dplyr)
library(ggplot2)
library(httr)
library(jsonlite)
library(patchwork)
library(pxR)
library(plotly)
library(RColorBrewer)
library(readr)
library(readxl)
library(rjson)
library(rlang)
library(sf)
library(tidyr)
library(tidyverse)
library(viridis)
load("OUTPUT/enviroment.RData")
tipo_ccaa_consumo_o_no <- read_delim("INPUT/DATA/datos_ccaa/tipo_ccaa_consumo_o_no.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
antibioticos <- tipo_ccaa_consumo_o_no %>%
dplyr::filter(`Tipo de medicamento` == "Antibióticos",`Sexo` == "Ambos sexos")%>%
dplyr::filter(`Sí o no` == "Sí")
# Esta tabla enseña que el 3,54% de la población española en la última encuesta reconoce
# haber consumido antibióticos en las últimas 2 semanas (En el año 2021)
antibioticos$Total <- gsub(",", ".", antibioticos$Total)
# Limpia espacios y caracteres no numéricos (si es necesario)
antibioticos$Total <- gsub(" ", "", antibioticos$Total)
# Convierte a numérico
antibioticos$Total <- as.numeric(antibioticos$Total)
# Revisa si hay NA después de la conversión
sum(is.na(antibioticos$Total))  # Muestra el número de NAs
consumo <- antibioticos %>%
group_by(`Comunidades y Ciudades Autónomas`) %>%
arrange(desc(Total))
c_c_final <- consumo %>%
mutate(`Comunidades y Ciudades Autónomas` = ifelse(is.na(`Comunidades y Ciudades Autónomas`), "Total País", `Comunidades y Ciudades Autónomas`))%>%
dplyr::rename(comunidades_autonomas = `Comunidades y Ciudades Autónomas`)%>%
select(comunidades_autonomas, Total)%>%
dplyr::rename(total_consumo_ccaa = Total)
# Crear el gráfico de barras
ggplot(c_c_final, aes(x = reorder(comunidades_autonomas, -total_consumo_ccaa), y = total_consumo_ccaa)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Comunidades Autónomas", y = "Total Consumo", title = "Consumo de antibióticos por Comunidad Autónoma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Leer el archivo .px
archivo_px <- read.px("INPUT/DATA/datos_ccaa/tipo_ccaa_recetado_o_no.px")
df_px <- as.data.frame(archivo_px)
# quedarme solo con los antibióticos
antibiotic <- df_px[df_px[["Tipo.de.medicamento"]] == "Antibióticos" & df_px$`Sexo` == "Ambos sexos", ]
# qué comunidad autónoma se automedica más
consumo_comunidades <- antibiotic%>%
dplyr::filter(`Recetado` == "No recetado") %>%
dplyr::filter(value != 0)%>%
group_by(`Comunidad.autónoma`) %>%
arrange(desc(value)) %>%
select(Comunidad.autónoma, value)%>%
dplyr::rename(comunidades_autonomas = Comunidad.autónoma)%>%
dplyr::rename("Automedicación (%)" = value)%>%
dplyr::mutate(comunidades_autonomas = case_when(
comunidades_autonomas == "Total" ~ "Total País",
TRUE ~ comunidades_autonomas
))
unir_consumo_autoconsumo <- inner_join(c_c_final, consumo_comunidades, by = "comunidades_autonomas")%>%
mutate("Automedicación (%)" = total_consumo_ccaa * `Automedicación (%)`/100)%>%
dplyr::rename("Consumo total" = total_consumo_ccaa)%>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c("Consumo total":"Automedicación (%)")) %>%
mutate(Variable = factor(Variable, levels = c("Consumo total","Automedicación (%)")))
ggplot(unir_consumo_autoconsumo, aes(fill = Variable, y = Valores, x = reorder(comunidades_autonomas, -Valores))) +
geom_bar(position = "stack", stat = "identity") +
scale_fill_manual(values = c("Consumo total" = "lightgreen",
"Automedicación (%)" = "tomato")) +
labs(x = "Comunidades Autónomas", y = "Porcentaje de Consumo", title = "Automedicación según el consumo de antibióticos por CCAA ")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(rlang)
cambio_nombre_codigo <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "Slovakia" ~ "SK",
!!columna_sym == "Belgium" ~ "BE",
!!columna_sym == "Cyprus" ~ "CY",
!!columna_sym == "Greece" ~ "EL",
!!columna_sym == "Romania" ~ "RO",
!!columna_sym == "Bulgaria" ~ "BG",
!!columna_sym == "France" ~ "FR",
!!columna_sym == "Malta" ~ "MT",
!!columna_sym == "Poland" ~ "PL",
!!columna_sym == "Spain" ~ "ES",
!!columna_sym == "Ireland" ~ "IE",
!!columna_sym == "Italy" ~ "IT",
!!columna_sym == "Luxembourg" ~ "LU",
!!columna_sym == "Portugal" ~ "PT",
!!columna_sym == "Czech Republic" ~ "CZ",
!!columna_sym == "Czechia" ~ "CZ",
!!columna_sym == "Finland" ~ "FI",
!!columna_sym == "Austria" ~ "AT",
!!columna_sym == "Germany" ~ "DE",
!!columna_sym == "Denmark" ~ "DK",
!!columna_sym == "Estonia" ~ "EE",
!!columna_sym == "Hungary" ~ "HU",
!!columna_sym == "Croatia" ~ "HR",
!!columna_sym == "Lithuania" ~ "LT",
!!columna_sym == "Latvia" ~ "LV",
!!columna_sym == "Netherlands" ~ "NL",
!!columna_sym == "Sweden" ~ "SE",
!!columna_sym == "Slovenia" ~ "SI",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
cambio_codigo_nombre <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "SK" ~ "Slovakia",
!!columna_sym == "BE" ~ "Belgium",
!!columna_sym == "CY" ~ "Cyprus",
!!columna_sym == "EL" ~ "Greece",
!!columna_sym == "RO" ~ "Romania",
!!columna_sym == "BG" ~ "Bulgaria",
!!columna_sym == "FR" ~ "France",
!!columna_sym == "MT" ~ "Malta",
!!columna_sym == "PL" ~ "Poland",
!!columna_sym == "ES" ~ "Spain",
!!columna_sym == "IE" ~ "Ireland",
!!columna_sym == "IT" ~ "Italy",
!!columna_sym == "LU" ~ "Luxembourg",
!!columna_sym == "PT" ~ "Portugal",
!!columna_sym == "CZ" ~ "Czech Republic",
!!columna_sym == "FI" ~ "Finland",
!!columna_sym == "AT" ~ "Austria",
!!columna_sym == "DE" ~ "Germany",
!!columna_sym == "DK" ~ "Denmark",
!!columna_sym == "EE" ~ "Estonia",
!!columna_sym == "HU" ~ "Hungary",
!!columna_sym == "HR" ~ "Croatia",
!!columna_sym == "LT" ~ "Lithuania",
!!columna_sym == "LV" ~ "Latvia",
!!columna_sym == "NL" ~ "Netherlands",
!!columna_sym == "SE" ~ "Sweden",
!!columna_sym == "SI" ~ "Slovenia",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
lista_pais <- list("BE", "BG", "CZ", "DK", "DE", "EE", "IE", "EL", "ES", "FR", "HR", "IT", "CY", "LV", "LT", "LU", "HU", "MT", "NL",
"AT", "PL", "PT", "RO", "SI", "SK", "FI", "SE")
DDD_Europa_Json<- jsonlite::fromJSON("INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- cambio_nombre_codigo(DDD_Europa_Json, "Country")
# Usar la función 'cambio_nombre_codigo' para convertir nombres de países en códigos
DDD_Europa_df <- DDD_Europa_df%>%
mutate(DDD_per_1000_inhabitants_per_day = as.numeric(`DDD per 1000 inhabitants per day`))%>%
mutate(DDD_per_100_inhabitants_per_day = DDD_per_1000_inhabitants_per_day / 10) %>%
dplyr::filter(Country %in% unlist(lista_pais)) %>%
select(-DDD_per_1000_inhabitants_per_day, -`DDD per 1000 inhabitants per day`)
# Añadir columna para calcular DDD por cada 100 habitantes y eliminar la columna original
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_100_inhabitants_per_day),
y = DDD_per_100_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 100 habitantes por día en Europa",
x = "País",
y = "DDD por 100 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
ant_europa_g <- read_excel("INPUT/DATA/consumo_ganaderia_2022.xlsx", skip = 3)
# Procesamiento inicial de los datos
a_e_g <- ant_europa_g %>%
select("Country", "...5") %>%  # Seleccionar las columnas relevantes
dplyr::rename(Antibiotic_use_in_livestock_1000_PCU = `...5`) %>%  # Renombrar columnas
mutate(Year = "2022") %>%  # Añadir la columna de año
cambio_nombre_codigo("Country") %>%  # Usar la función para cambiar nombres de países a códigos
drop_na() %>%  # Eliminar filas con valores NA
relocate(3, .before = 2)  # Reubicar la columna 'Year' antes de 'Country'
# Crear un nuevo data frame con datos modificados
new <- a_e_g %>%
select(-Year) %>%  # Eliminar la columna 'Year'
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU) / 10) %>%  # Calcular el nuevo indicador
select(-Antibiotic_use_in_livestock_1000_PCU)  # Eliminar la columna original
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
dplyr::filter(Time == 2022) %>%
dplyr::filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
dplyr::select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
lista_codigos_paises <- list("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "EL", "ES", "FI", "FR", "HR", "HU",
"IE", "IT", "LT", "LU", "LV", "MT", "NL", "PL", "PT", "RO", "SE", "SI", "SK")
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
dplyr::summarise(mean_value = mean(Value, na.rm = TRUE))%>%
dplyr::filter(RegionCode %in% lista_codigos_paises) %>%   # Calcula la media en cada grupo y desagrupa
tidyr::drop_na() %>%
mutate(grupo = recode(grupo, "Ent" = "Enterococcus", "Esc" = "Escherichia","Aci"="Acinetobacter",
"Kle"="Klebsiella","Pse" = "Pseudomonas","Sta"="Staphylococcus", "Str"="Streptococcus"))
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))%>%
arrange(desc(mean_value_region))
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")%>%
mutate(DDD_per_100_inhabitants_per_year = DDD_per_100_inhabitants_per_day*365/100*100)%>%
mutate(Antibiotic_use_in_livestock_1000_PCU = Antibiotic_use_in_livestock_100_PCU*10)%>%
dplyr::select(-DDD_per_100_inhabitants_per_day)%>%
left_join(x = ., y = media_region, by = c("Country" = "RegionCode"))%>%
group_by(Country, mean_value_region)%>%
dplyr::rename("100 habitantes (mg)" = DDD_per_100_inhabitants_per_year, "1000 PCU (mg)" = Antibiotic_use_in_livestock_100_PCU, "Valor" = mean_value_region)%>%
pivot_longer(., names_to = "Consumo", values_to = "Dosis", cols= c(2:3))
ggplot(paises_consumo_ab_sectores,aes(x=Dosis, y=Valor))+
geom_point(aes(color=factor(Consumo)))+
geom_smooth(method = 'lm',aes(colour=factor(Consumo)))+
labs(title = 'Relación entre el consumo de antibióticos y resistencia antimicrobiana',
y='Incidencia',
x= 'Consumo',
colour='Consumo en dosis')
positivos_animales <- bacterias_personas%>%
group_by(RegionCode)%>%
dplyr::summarise(media = mean(mean_value, na.rm = TRUE))
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
dplyr::filter(Time == 2022) %>%
dplyr::filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
dplyr::select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
lista_codigos_paises <- list("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "EL", "ES", "FI", "FR", "HR", "HU",
"IE", "IT", "LT", "LU", "LV", "MT", "NL", "PL", "PT", "RO", "SE", "SI", "SK")
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
dplyr::summarise(mean_value = mean(Value, na.rm = TRUE))%>%
dplyr::filter(RegionCode %in% lista_codigos_paises) %>%   # Calcula la media en cada grupo y desagrupa
tidyr::drop_na() %>%
mutate(grupo = recode(grupo, "Ent" = "Enterococcus", "Esc" = "Escherichia","Aci"="Acinetobacter",
"Kle"="Klebsiella","Pse" = "Pseudomonas","Sta"="Staphylococcus", "Str"="Streptococcus"))
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))%>%
arrange(desc(mean_value_region))
bacterias_personas<-otra %>%
dplyr::filter(grupo %in% c("Enterococcus", "Escherichia"))
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")%>%
mutate(DDD_per_100_inhabitants_per_year = DDD_per_100_inhabitants_per_day*365/100*100)%>%
mutate(Antibiotic_use_in_livestock_1000_PCU = Antibiotic_use_in_livestock_100_PCU*10)%>%
dplyr::select(-DDD_per_100_inhabitants_per_day)%>%
left_join(x = ., y = media_region, by = c("Country" = "RegionCode"))%>%
group_by(Country, mean_value_region)%>%
dplyr::rename("100 habitantes (mg)" = DDD_per_100_inhabitants_per_year, "1000 PCU (mg)" = Antibiotic_use_in_livestock_100_PCU, "Valor" = mean_value_region)%>%
pivot_longer(., names_to = "Consumo", values_to = "Dosis", cols= c(2:3))
ggplot(paises_consumo_ab_sectores,aes(x=Dosis, y=Valor))+
geom_point(aes(color=factor(Consumo)))+
geom_smooth(method = 'lm',aes(colour=factor(Consumo)))+
labs(title = 'Relación entre el consumo de antibióticos y resistencia antimicrobiana',
y='Incidencia',
x= 'Consumo',
colour='Consumo en dosis')
positivos_animales <- bacterias_personas%>%
group_by(RegionCode)%>%
dplyr::summarise(media = mean(mean_value, na.rm = TRUE))
positivos_resist_sectores<-left_join(x = media_region, y = positivos_animales, by = "RegionCode")%>%
dplyr::rename(Animales = media)%>%
dplyr::rename(Personas = mean_value_region) %>%
arrange(desc(Personas))%>%
group_by(RegionCode) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(Personas:Animales)) %>%
mutate(Variable = factor(Variable, levels = c("Personas","Animales"))) %>%
filter(Valores!=0.00)
#GRAFICA DE BARRAS DE ENTRE MEDIA DE POSITIVOS EN ANIMALES Y PERSONAS
ggplot(data = positivos_resist_sectores, aes(y = Valores, x = RegionCode)) +
geom_bar(aes(fill = Variable), position = "dodge", stat = "identity")+
labs(title='Media por paises de positivos en animales y en personas',
x='Paises',
fill='% medio positivos')+
scale_fill_manual(values = c("Personas" = 'violet',
"Animales" = "blue")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#BOXPLOT DE BACTERIAS QUE AFECTAN A ANIMALES Y BACTERIAS
boxplot_bac_ganaderia<-ggplot(media_ganaderia,aes(x=zoonosis_name, y=media, fill=zoonosis_name)) +
geom_boxplot() +
labs(title = "Incidencia de bacterias en ganadería ",
x = "Bacterias", y = "Incidencia media")  +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, hjust = 1))
# Calcular la media basada en la proporción de positivos
media_ganaderia <- paises_UE_df %>%
group_by(Codigo, zoonosis_name) %>%
dplyr::summarise(
media = mean((MuestraPositiva / TotalMuestras)*100, na.rm = TRUE)) %>%
ungroup() %>%
tidyr::drop_na()
table(factor(otra$grupo))
table(factor(media_ganaderia$zoonosis_name))
#Observamos que las unicas bacterias comunes son Enterococcus y Escherichia
#Filtro solo las bacterias comunes y les cambio el nombre de las bacterias comunes
bacterias_personas<-otra %>%
dplyr::filter(grupo %in% c("Enterococcus", "Escherichia"))
#Filtro las bacterias comunes
media_ganaderia_nueva<-media_ganaderia %>%
filter(zoonosis_name %in% c("Enterococcus,", "Escherichia")) %>%
mutate(zoonosis_name = recode(zoonosis_name, "Enterococcus," = "Enterococcus"))
#BOXPLOT DE BACTERIAS QUE AFECTAN A ANIMALES Y BACTERIAS
boxplot_bac_ganaderia<-ggplot(media_ganaderia,aes(x=zoonosis_name, y=media, fill=zoonosis_name)) +
geom_boxplot() +
labs(title = "Incidencia de bacterias en ganadería ",
x = "Bacterias", y = "Incidencia media")  +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, hjust = 1))
boxplot_baterias_personas <- ggplot(otra, aes(x = grupo, y = mean_value, fill=grupo)) +
geom_boxplot() +
labs(title = "Incidencia de bacterias en personas ",
x = "Bacterias", y = "Incidencia media") +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, hjust = 1))
boxplot_bac_ganaderia + boxplot_baterias_personas
tabla_unida <- full_join(x=media_ganaderia_nueva, y= bacterias_personas,
by = c("Codigo" = "RegionCode", "zoonosis_name" = "grupo")) %>%
dplyr::rename(Ganaderia=media, Poblacion=mean_value) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(Ganaderia:Poblacion)) %>%
mutate(Bacteria = factor(zoonosis_name, levels = c("Escherichia","Enterococcus"))) %>%
mutate(Variable = factor(Variable, levels = c("Ganaderia","Poblacion"))) %>%
tidyr::drop_na()
ggplot(data = tabla_unida, aes(x = Valores, y = Codigo)) +
geom_bar(aes(fill = Bacteria), position = "dodge", stat = "identity") +
facet_wrap(facets = vars(Variable), nrow = 1)+
labs(x = "Porcentaje de incidencia")
pib <- read_table("INPUT/DATA/datos_pib.tsv")
# Cambio de nombre columna
colnames(pib)[1] <- "pais"
# Nos quedamos con las últimas letras
pib$pais <- substr(pib$pais, nchar(pib$pais) - 1, nchar(pib$pais))
lista_pais <- list("BE", "BG", "CZ", "DK", "DE", "EE", "IE", "EL", "ES", "FR", "HR", "IT", "CY", "LV", "LT", "LU", "HU", "MT", "NL",
"AT", "PL", "PT", "RO", "SI", "SK", "FI", "SE")
# nos quedamos solo con los países de la UE
# Filtrar los datos, quitar columnas nulas y seleccionar las columnas necesarias en una tubería
pib_2022_desc <- pib %>%
dplyr::filter(pais %in% unlist(lista_pais)) %>%  # Filtrar por los países en 'lista_pais'
dplyr::select(where(~ all(!is.na(.)))) %>% # Eliminar columnas con todos los valores nulos
dplyr::select(pais, `2022`) %>%                 # Seleccionar las columnas 'pais' y '2022'
arrange(desc(`2022`))                    # Ordenar por el PIB del 2022 en orden descendente
grafico_pib <- ggplot(pib_2022_desc, aes(x = reorder(pais, -`2022`), y = `2022`)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "País", y = "Valor en 2022", title = "PIB por País en 2022") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
grafico_pib
# graficos positivos generales
# Crear el gráfico usando los datos ordenados
grafico <- ggplot(media_region, aes(x = reorder(RegionCode, -mean_value_region), y = mean_value_region)) +
geom_bar(stat = "identity", fill = "skyblue", color = "blue") +
labs(
title = "Media de Incidencia por Región (Orden Descendente)",
x = "País",
y = "Media de Incidencia"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
grafico
positivos_sinPivotar<-left_join(x = media_region, y = positivos_animales, by = "RegionCode")%>%
dplyr::rename(porcentaje_posit_animales = media)%>%
dplyr::rename(porcentaje_posit_personas = mean_value_region)
positivos_PIB<-full_join(y= pib_2022_desc ,x=positivos_sinPivotar,by=c('RegionCode'='pais')) %>%
dplyr::rename(PIB='2022') %>%
dplyr::rename(Animales=porcentaje_posit_animales, Personas = porcentaje_posit_personas)%>%
group_by(RegionCode) %>%
pivot_longer(.,names_to = "Variable", values_to = "Valores", cols = c(Personas:Animales)) %>%
mutate(Variable = factor(Variable, levels = c("Personas","Animales"))) %>%
filter(Valores!=0.00)
final<-ggplot(positivos_PIB,aes(x=PIB, y=Valores))+
geom_point(aes(color=factor(Variable)))+
geom_smooth(method = 'lm',aes(colour=factor(Variable)))+
labs(title = 'Relación entre PIB y resistencia antimicrobiana',
y='Positivos en AMR',
colour='Poblaciones de positivos')
final
# Cargar las bibliotecas necesarias
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
library(tidyr)
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
dplyr::filter(Time == 2022) %>%
dplyr::filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
dplyr::select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
lista_codigos_paises <- list("AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "EL", "ES", "FI", "FR", "HR", "HU",
"IE", "IT", "LT", "LU", "LV", "MT", "NL", "PL", "PT", "RO", "SE", "SI", "SK")
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
dplyr::summarise(mean_value = mean(Value, na.rm = TRUE))%>%
dplyr::filter(RegionCode %in% lista_codigos_paises) %>%   # Calcula la media en cada grupo y desagrupa
tidyr::drop_na() %>%
mutate(grupo = recode(grupo, "Ent" = "Enterococcus", "Esc" = "Escherichia","Aci"="Acinetobacter",
"Kle"="Klebsiella","Pse" = "Pseudomonas","Sta"="Staphylococcus", "Str"="Streptococcus"))
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))%>%
arrange(desc(mean_value_region))
# --------------------------------------------------------------------
# graficos positivos generales
# Crear el gráfico usando los datos ordenados
grafico <- ggplot(media_region, aes(x = reorder(RegionCode, -mean_value_region), y = mean_value_region)) +
geom_bar(stat = "identity", fill = "skyblue", color = "blue") +
labs(
title = "Media de Incidencia por Región (Orden Descendente)",
x = "País",
y = "Media de Incidencia"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
grafico
# gráficos bacterias en personas
boxplot_baterias_personas <- ggplot(otra, aes(x = grupo, y = mean_value, fill=grupo)) +
geom_boxplot() +
labs(title = "Incidencia de bacterias en personas ",
x = "Bacterias", y = "Porcentaje de incidencia") +
theme_light()+
theme(legend.position="none")
boxplot_baterias_personas
#-------------------------------------------------------------------------------------------
# GRAFICO INTERACTIVO que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(otra, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
View(grafico)
View(incidencia_2022MF)
