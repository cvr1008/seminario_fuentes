<<<<<<< HEAD
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
library(ggplot2)
library(plotly)
library(dplyr)
install.packages("leaflet")
library(leaflet)  # Para crear mapas interactivos
library(sf)       # Para trabajar con datos espaciales (sf)
library(viridis)
=======
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))  # Calcular la media por RegionCode
# --------------------------------------------------------------------
# gráficos
ggplot(otra, aes(x = grupo, y = mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# gráfico que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(otra, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
# Cargar las bibliotecas necesarias
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
filter(Time == 2022) %>%
filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calcula la media en cada grupo y desagrupa
otra$mean_value[is.nan(otra$mean_value)] <- 0
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))  # Calcular la media por RegionCode
# --------------------------------------------------------------------
# gráficos
ggplot(otra, aes(x = grupo, y = mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# gráfico que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(otra, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
View(interactive_scatter_plot)
View(interactive_scatter_plot)
View(incidencia_keyed)
View(incidencia_keyed)
View(scatter_plot)
interactive_scatter_plot
# Cargar las bibliotecas necesarias
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
filter(Time == 2022) %>%
filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calcula la media en cada grupo y desagrupa
otra$mean_value[is.nan(otra$mean_value)] <- 0
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))  # Calcular la media por RegionCode
# --------------------------------------------------------------------
# gráficos
ggplot(otra, aes(x = grupo, y = mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# gráfico que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(otra, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
knitr::opts_chunk$set(echo = TRUE)
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
filter(Time == 2022) %>%
filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calcula la media en cada grupo y desagrupa
otra$mean_value[is.nan(otra$mean_value)] <- 0
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))  # Calcular la media por RegionCode
# --------------------------------------------------------------------
# gráficos
ggplot(otra, aes(x = grupo, y = mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# gráfico que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(otra, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
# Cargar las bibliotecas necesarias
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
filter(Time == 2022) %>%
filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calcula la media en cada grupo y desagrupa
otra$mean_value[is.nan(otra$mean_value)] <- 0
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))  # Calcular la media por RegionCode
# --------------------------------------------------------------------
# gráficos
ggplot(otra, aes(x = grupo, y = mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# gráfico que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(otra, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
# Cargar el archivo CSV de incidencia de enfermedades
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
# Filtrar los datos para el año 2022 y las categorías Male y Female
incidencia_2022MF <- Incidencia_enfermedades %>%
filter(Time == 2022) %>%
filter(Category == 'Male' | Category == 'Female')
# Convertir 'Value' a numérico
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
# Crear el dataframe media_poblacion con una nueva columna 'grupo'
media_poblacion <- incidencia_2022MF %>%
select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
# Calcular la media de 'Value' por 'RegionCode' y 'grupo'
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%    # Ordena los datos
group_by(RegionCode, grupo) %>%   # Agrupa por RegionCode y grupo
summarise(mean_value = mean(Value, na.rm = TRUE))  # Calcula la media en cada grupo y desagrupa
otra$mean_value[is.nan(otra$mean_value)] <- 0
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))  # Calcular la media por RegionCode
# --------------------------------------------------------------------
# gráficos
ggplot(otra, aes(x = grupo, y = mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# gráfico que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(otra, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
save.image("C:/Users/usuario/seminario_fuentes/OUTPUT/datos_y_graficos_incidencia.RData")
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises..JSON")
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
library(jsonlite)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
library(jsonlite)
DDD_Europa_Json <- fromJSON("INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises..JSON")
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_Json
View(DDD_Europa_Json)
str(DDD_Europa_Json)
# --------------------
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# Verificar la estructura del nuevo dataframe
str(DDD_Europa_df)
# Mostrar las primeras filas del dataframe
head(DDD_Europa_df)
View(DDD_Europa_df)
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_1000_inhabitants_per_day),
y = DDD_per_1000_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 1000 habitantes por día en Europa",
x = "País",
y = "DDD por 1000 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_Json
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_1000_inhabitants_per_day),
y = DDD_per_1000_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 1000 habitantes por día en Europa",
x = "País",
y = "DDD por 1000 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
load("OUTPUT/paisesUE_datos_AMR.RData")
>>>>>>> 54ea5263dda2eea591290762fe2af5df66384828
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
<<<<<<< HEAD
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
world_map_europe <- as.data.frame(world_map %>% filter(NAME %in% paises_UE))
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
world_map_europe
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
# Mostrar el gráfico interactivo
interactive_map
interactive_map <- plot_ly(data = world_map_europe,
type = "choropleth",
locations = ~NAME,
z = ~positivity_rate,
colorscale = 'Plasma',
colorbar = list(title = "Tasa de Positividad (%)"),
text = ~NAME)
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
leaflet_map <- leaflet(data = world_map_europe) %>%
addTiles() %>%
addPolygons(
fillColor = ~viridis::viridis(1)[as.integer(cut(positivity_rate, breaks = 10))],
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste(NAME, "<br>", "Positividad: ", round(positivity_rate, 2), "%")
) %>%
addLegend(pal = viridis::viridis, values = ~positivity_rate, title = "Tasa de Positividad (%)")
# Mostrar el mapa interactivo
leaflet_map
library(leaflet)  # Para crear mapas interactivos
leaflet_map <- leaflet(data = world_map_europe) %>%
addTiles() %>%
addPolygons(
fillColor = ~viridis::viridis(1)[as.integer(cut(positivity_rate, breaks = 10))],
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste(NAME, "<br>", "Positividad: ", round(positivity_rate, 2), "%")
) %>%
addLegend(pal = viridis::viridis, values = ~positivity_rate, title = "Tasa de Positividad (%)")
library(viridis)
leaflet_map <- leaflet(data = world_map_europe) %>%
addTiles() %>%
addPolygons(
fillColor = ~viridis::viridis(1)[as.integer(cut(positivity_rate, breaks = 10))],
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste(NAME, "<br>", "Positividad: ", round(positivity_rate, 2), "%")
) %>%
addLegend(pal = viridis::viridis, values = ~positivity_rate, title = "Tasa de Positividad (%)")
print(class(world_map_europe))
# Crear el mapa interactivo con leaflet
leaflet_map <- leaflet(data = world_map_europe) %>%
addTiles() %>%
addPolygons(
fillColor = ~viridis::viridis(1)[as.integer(cut(positivity_rate, breaks = 10))],
fillOpacity = 0.7,
color = "black",
weight = 1,
popup = ~paste(NAME, "<br>", "Positividad: ", round(positivity_rate, 2), "%")
) %>%
addLegend(pal = viridis::viridis, values = ~positivity_rate, title = "Tasa de Positividad (%)")
# Mostrar el mapa interactivo
leaflet_map
world_map_europe <- world_map %>% filter(NAME %in% paises_UE)
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
world_map_europe
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(mapa)
# Mostrar el gráfico interactivo
interactive_map
View(paises_UE_df)
# Asegúrate de cargar dplyr si no lo has hecho
library(dplyr)
# Calcular la media de TotalMuestras y MuestraPositiva por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(NombrePais, zoonosis_name) %>%
summarise(
MediaTotalMuestras = mean(TotalMuestras, na.rm = TRUE),
MediaMuestraPositiva = mean(MuestraPositiva, na.rm = TRUE)
)
tipos_bacterias <- paises_UE_df %>%
distinct(zoonosis_name)
tipos_bacterias
# Asegúrate de cargar dplyr si no lo has hecho
library(dplyr)
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras/MuestraPositiva, na.rm = TRUE)) %>%
ungroup()
# Ver el resultado
print(media_bacterias)
ggplot(media_por_bacteria, aes(x = grupo, y = media_mean_value)) +
=======
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
pibPP <- read_table("INPUT/DATA/datos_pib.tsv")
# Cambio de nombre columna
colnames(pibPP)[1] <- "pais"
# Nos quedamos con las últimas letras
pibPP$pais <- substr(pibPP$pais, nchar(pibPP$pais) - 1, nchar(pibPP$pais))
lista_pais <- list("BE", "BG", "CZ", "DK", "DE", "EE", "IE", "EL", "ES", "FR", "HR", "IT", "CY", "LV", "LT", "LU", "HU", "MT", "NL",
"AT", "PL", "PT", "RO", "SI", "SK", "FI", "SE")
# nos quedamos solo con los países de la UE
pib <- pibPP %>% filter(pais %in% unlist(lista_pais))
# quitar la columna nula
pib <- pib[, colSums(is.na(pib)) < nrow(pib)]
pib
pib_2022 <- pib %>% select(pais, `2022`)
# ggplot del pib en el 2022 (primero lo ponemos en descendente)
pib_2022_desc <- pib_2022 %>% arrange(desc(`2022`))
# sustituir las etiquetas de los países
pib_2022_desc <- pib_2022_desc %>%
mutate(pais = case_when(
pais == "SK" ~ "Eslovaquia",
pais == "SI" ~ "Slovenia",
pais == "EE" ~ "Estonia",
pais == "MT" ~ "Malta",
pais == "LV" ~ "Latvia",
pais == "HR" ~ "Croatia",
pais == "EL" ~ "Greece",
pais == "BG" ~ "Bulgaria",
TRUE ~ pais # Mantiene los nombres que no están en la lista
))
grafico_pib <- ggplot(pib_2022_desc, aes(x = reorder(pais, -`2022`), y = `2022`)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "País", y = "Valor en 2022", title = "PIB por País en 2022") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
grafico_pib
Incidencia_enfermedades <-  read_csv("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv")
incidencia_2022MF <- Incidencia_enfermedades %>%
filter(Time == 2022) %>%
filter(Category == 'Male' | Category == 'Female')
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
media_poblacion <- incidencia_2022MF %>%
select(-Unit, -HealthTopic, -Time, -Distribution) %>%
mutate(grupo = substr(Population, 1, 3))
otra <- media_poblacion %>%
select(-Category, -CategoryIndex, -Population) %>%
arrange(RegionCode, grupo) %>%
group_by(RegionCode, grupo) %>%
summarise(mean_value = mean(Value, na.rm = TRUE))
otra$mean_value[is.nan(otra$mean_value)] <- 0
media_region <- otra %>%
group_by(RegionCode) %>%
summarise(mean_value_region = mean(mean_value, na.rm = TRUE))
ggplot(otra, aes(x = grupo, y = mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
incidencia_keyed <- highlight_key(otra, ~RegionCode)
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
interactive_scatter_plot
load("OUTPUT/datos_y_graficos_incidencia.RData")
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_1000_inhabitants_per_day),
y = DDD_per_1000_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 1000 habitantes por día en Europa",
x = "País",
y = "DDD por 1000 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
knitr::opts_chunk$set(echo = TRUE)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
install.packages("sf")
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")
knitr::opts_chunk$set(echo = TRUE)
load("OUTPUT/datos_y_graficos_incidencia.RData")
boxplot <- ggplot(otra, aes(x = grupo, y = mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf)
library(pxR)
library(RColorBrewer)
library(httr)
library(tidyverse)
library(jsonlite)
library(readxl)
library(rjson)
library(tidyr)
boxplot <- ggplot(otra, aes(x = grupo, y = mean_value)) +
>>>>>>> 54ea5263dda2eea591290762fe2af5df66384828
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
save.image("C:/Users/usuario/seminario_fuentes/OUTPUT/paisesUE_datos_AMR.RData")
load("OUTPUT/datos_y_graficos_incidencia.RData")
boxplot
interactive_scatter_plot
interactive_scatter_plot
boxplot
interactive_scatter_plot
interactive_scatter_plot
paises_UE_df<-df_combinado%>%
select(rep_Country_name,rep_Country_code,zoonosis_name,matrix_name,totUnitsTested,totUnitsPositive,sampUnitType_name,sampType_name,MIC_name,CUTOFFVALUE)%>%
mutate(zoonosis_name = sub(".*", "", zoonosis_name))%>% # Extraer solo la primera palabra
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")
load("OUTPUT/paisesUE_datos_AMR.RData")
paises_UE_df<-df_combinado%>%
select(rep_Country_name,rep_Country_code,zoonosis_name,matrix_name,totUnitsTested,totUnitsPositive,sampUnitType_name,sampType_name,MIC_name,CUTOFFVALUE)%>%
mutate(zoonosis_name = sub(".*", "", zoonosis_name))%>% # Extraer solo la primera palabra
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")
<<<<<<< HEAD
# Nuevo vector con los nombres de las columnas
nuevos_nombres <- c("NombrePais", "Codigo", "zoonosis_name","OrigenMuestra", "TotalMuestras","MuestraPositiva","Tipo_Unidad_Muestra","TipoMuestra","MIC_name","ValorCorte")  # Modifica según el número de columnas
# Asignar los nuevos nombres de las columnas al data frame
colnames(paises_UE_df) <- nuevos_nombres
View(paises_UE_df)
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras/MuestraPositiva, na.rm = TRUE)) %>%
ungroup()
View(media_bacterias)
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras/MuestraPositiva, na.rm = TRUE)/100) %>%
ungroup()
View(paises_UE_df)
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras / MuestraPositiva, na.rm = TRUE) * 100) %>%  # Multiplicar por 100 para porcentaje
ungroup()
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = MuestraPositiva/TotalMuestras* 100) %>%  # Multiplicar por 100 para porcentaje
ungroup()
ggplot(media_bacterias, aes(x = grupo, y = media_mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
library(ggplot2)
ncidencia_keyed <- highlight_key(media_bacterias, ~media_bacterias$NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x =media_bacterias$zoonosis_name, y = MediaMuestraPositiva, color = media_bacterias$NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_bacterias, ~media_bacterias$NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x =media_bacterias$zoonosis_name, y = MediaMuestraPositiva, color = media_bacterias$NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# Mostrar el gráfico interactivo
interactive_scatter_plot
# Mostrar el gráfico interactivo
interactive_scatter_plot
View(ncidencia_keyed)
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_bacterias, ~media_bacterias$NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x =media_bacterias$zoonosis_name, y = MediaMuestraPositiva, color = media_bacterias$NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# Mostrar el gráfico interactivo
interactive_scatter_plot
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/paisesUE_datosAMR.RData")
View(paises_UE_df)
#seleccionamos las columnas que vamos a necesitar
paises_UE_df <- df_combinado %>%
select(rep_Country_name, rep_Country_code, zoonosis_name, matrix_name,
totUnitsTested, totUnitsPositive, sampUnitType_name, sampType_name,MIC_name, CUTOFFVALUE) %>%
mutate(zoonosis_name = sub(" .*", "", zoonosis_name)) %>%  # Extraer solo la primera palabra
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")
# Cargar dplyr
library(dplyr)
#seleccionamos las columnas que vamos a necesitar
paises_UE_df <- df_combinado %>%
select(rep_Country_name, rep_Country_code, zoonosis_name, matrix_name,
totUnitsTested, totUnitsPositive, sampUnitType_name, sampType_name,MIC_name, CUTOFFVALUE) %>%
mutate(zoonosis_name = sub(" .*", "", zoonosis_name)) %>%  # Extraer solo la primera palabra
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")
# Nuevo vector con los nombres de las columnas
nuevos_nombres <- c("NombrePais", "Codigo", "zoonosis_name","OrigenMuestra", "TotalMuestras","MuestraPositiva","Tipo_Unidad_Muestra","TipoMuestra","MIC_name","ValorCorte")  # Modifica según el número de columnas
# Asignar los nuevos nombres de las columnas al data frame
colnames(paises_UE_df) <- nuevos_nombres
save.image("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/paisesUE_datos_AMR.RData")
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/paisesUE_datos_AMR.RData")
library(ggplot2)
library(plotly)
library(dplyr)
library(leaflet)  # Para crear mapas interactivos
library(sf)       # Para trabajar con datos espaciales (sf)
library(viridis)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
mapa_mudo <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
mapa_mundo_europa <- mapa_mudo %>%
filter(NAME %in% paises_UE)
mapa_mundo_europa <- mapa_mudo %>% filter(NAME %in% paises_UE)
positivos_por_ciudad <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_pruebas = sum(TotalMuestras, na.rm = TRUE),
total_positivos= sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(ratio_positivo = (total_positivos / total_pruebas) * 100)
# Unir datos de positividad al mapa
mapa_mundo_europa$NAME <- as.character(mapa_mundo_europa$NAME)
positivos_por_ciudad$NombrePais <- as.character(positivos_por_ciudad$NombrePais)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(positivos_por_ciudad, by = c("NAME" = "NombrePais"))
mapa_mundo_europa
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = ratio_positivo)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
# Mostrar el gráfico interactivo
mapa_interactivo
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
Incidencia_enfermedades <- read_delim("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
Incidencia_enfermedades
summary(Incidencia_enfermedades)
View(Incidencia_enfermedades)
incidencia_2022 <- Incidencia_enfermedades %>%
filter(Time == 2022)
incidencia_2022MF <- incidencia_2022 %>%
filter(Category == 'Male' | Category == 'Female')
View(incidencia_2022MF)
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
media_poblacion_genero <- incidencia_2022MF %>%
arrange(RegionCode, Population) %>%  # Ordenar los datos
group_by(RegionCode, Population) %>%
mutate(mean_value = (Value + lead(Value)) / 2) %>%
ungroup()
incidencia <- media_poblacion_genero %>%
mutate(grupo = substr(Population, 1, 3)) %>%
select(-Unit, -Category, -CategoryIndex, -Value, -Distribution)%>%
filter(!is.na(mean_value))
# Ver el dataframe
print(incidencia)
View(incidencia)
media_por_bacteria <- incidencia %>%
mutate(grupo = substr(Population, 1, 3)) %>%                # Crear una columna con las primeras letras
arrange(grupo, RegionCode) %>%                              # Ordenar por grupo y RegionCode
group_by(grupo, RegionCode) %>%                             # Agrupar por grupo y RegionCode
summarise(media_mean_value = mean(mean_value, na.rm = TRUE)) %>%  # Calcular la media para cada combinación de grupo y RegionCode
ungroup()
View(media_por_bacteria)
ggplot(media_por_bacteria, aes(x = grupo, y = media_mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# gráfico que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_por_bacteria, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = media_mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
# Dataframe final con el valor de media final de todas las bacterias
media_por_pais <- media_por_bacteria %>%
group_by(RegionCode) %>%
summarise(media = mean(media_mean_value, na.rm = TRUE))
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
Incidencia_enfermedades <- read_delim("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
Incidencia_enfermedades
summary(Incidencia_enfermedades)
View(Incidencia_enfermedades)
incidencia_2022 <- Incidencia_enfermedades %>%
filter(Time == 2022)
incidencia_2022MF <- incidencia_2022 %>%
filter(Category == 'Male' | Category == 'Female')
View(incidencia_2022MF)
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
media_poblacion_genero <- incidencia_2022MF %>%
arrange(RegionCode, Population) %>%  # Ordenar los datos
group_by(RegionCode, Population) %>%
mutate(mean_value = (Value + lead(Value)) / 2) %>%
ungroup()
incidencia <- media_poblacion_genero %>%
mutate(grupo = substr(Population, 1, 3)) %>%
select(-Unit, -Category, -CategoryIndex, -Value, -Distribution)%>%
filter(!is.na(mean_value))
# Ver el dataframe
print(incidencia)
View(incidencia)
media_por_bacteria <- incidencia %>%
mutate(grupo = substr(Population, 1, 3)) %>%                # Crear una columna con las primeras letras
arrange(grupo, RegionCode) %>%                              # Ordenar por grupo y RegionCode
group_by(grupo, RegionCode) %>%                             # Agrupar por grupo y RegionCode
summarise(media_mean_value = mean(mean_value, na.rm = TRUE)) %>%  # Calcular la media para cada combinación de grupo y RegionCode
ungroup()
View(media_por_bacteria)
ggplot(media_por_bacteria, aes(x = grupo, y = media_mean_value)) +
geom_boxplot() +
labs(title = "Distribution of Mean Incidence by Bacteria Group",
x = "Bacteria Group", y = "Mean Incidence") +
theme_minimal()
# gráfico que te dice qué países tienen esa media para cada bacteria
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_por_bacteria, ~RegionCode)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = media_mean_value, color = RegionCode, text = paste("País:", RegionCode))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# cuando haces click en un país te dice solo los puntitos de ese país, cuando haces dobleckick en otra parte del gráfico, se desaparece.
# Mostrar el gráfico interactivo
interactive_scatter_plot
# Dataframe final con el valor de media final de todas las bacterias
media_por_pais <- media_por_bacteria %>%
group_by(RegionCode) %>%
summarise(media = mean(media_mean_value, na.rm = TRUE))
View(incidencia)
View(media_poblacion_genero)
View(incidencia_2022MF)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
Incidencia_enfermedades <- read_delim("INPUT/DATA/ECDC_encuesta_AMR_incidencia_enfermedades.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
Incidencia_enfermedades
summary(Incidencia_enfermedades)
View(Incidencia_enfermedades)
incidencia_2022 <- Incidencia_enfermedades %>%
filter(Time == 2022)
incidencia_2022MF <- incidencia_2022 %>%
filter(Category == 'Male' | Category == 'Female')
View(incidencia_2022MF)
incidencia_2022MF$Value <- as.numeric(incidencia_2022MF$Value)
media_poblacion_genero <- incidencia_2022MF %>%
arrange(RegionCode, Population) %>%  # Ordenar los datos
group_by(RegionCode, Population) %>%
mutate(mean_value = (Value + lead(Value)) / 2) %>%
ungroup()
=======
>>>>>>> 54ea5263dda2eea591290762fe2af5df66384828
