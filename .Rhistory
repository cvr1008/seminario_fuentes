antibioticos <- tipo_ccaa_consumo_o_no %>%
filter(`Tipo de medicamento` == "Antibióticos")
antibioticos <- tipo_ccaa_consumo_o_no[tipo_ccaa_consumo_o_no$`Tipo de medicamento` == "Antibióticos" & tipo_ccaa_consumo_o_no$`Sexo` == "Ambos sexos",]
antibioticos
View(antibioticos)
antibioticos_si <- antibioticos[antibioticos$`Sí o no` == "Sí",]
antibioticos_si
View(antibioticos_si)
antibioticos_si$Total <- gsub(",", ".", antibioticos_si$Total)
# Limpia espacios y caracteres no numéricos (si es necesario)
antibioticos_si$Total <- gsub(" ", "", antibioticos_si$Total)
# Convierte a numérico
antibioticos_si$Total <- as.numeric(antibioticos_si$Total)
# Revisa si hay NA después de la conversión
sum(is.na(antibioticos_si$Total))  # Muestra el número de NAs
consumo_comunidades <- antibioticos_si %>%
group_by(`Comunidades y Ciudades Autónomas`) %>%
summarise(Total_Consumo = sum(as.numeric(Total), na.rm = TRUE)) %>%
arrange(desc(Total_Consumo))
consumo_comunidades
c_c_final <- consumo_comunidades %>%
mutate(`Comunidades y Ciudades Autónomas` = ifelse(is.na(`Comunidades y Ciudades Autónomas`), "Total País", `Comunidades y Ciudades Autónomas`))
consumo_comunidades
consumo_comunidades <- antibioticos_si %>%
group_by(`Comunidades y Ciudades Autónomas`) %>%
#summarise(Total_Consumo = sum(as.numeric(Total), na.rm = TRUE)) %>%
arrange(desc(Total))
consumo_comunidades
c_c_final <- consumo_comunidades %>%
mutate(`Comunidades y Ciudades Autónomas` = ifelse(is.na(`Comunidades y Ciudades Autónomas`), "Total País", `Comunidades y Ciudades Autónomas`))
c_c_final
# Crear el gráfico de barras
ggplot(c_c_final, aes(x = reorder(`Comunidades y Ciudades Autónomas`, -Total_Consumo), y = Total_Consumo)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Comunidades Autónomas", y = "Total Consumo", title = "Consumo de antibióticos por Comunidad Autónoma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Crear el gráfico de barras
ggplot(c_c_final, aes(x = reorder(`Comunidades y Ciudades Autónomas`, -Total), y = Total)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Comunidades Autónomas", y = "Total Consumo", title = "Consumo de antibióticos por Comunidad Autónoma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(pxR)
library(readr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Leer el archivo .px
archivo_px <- read.px("C:/Users/usuario/seminario_fuentes/INPUT/DATA/datos_ccaa/tipo_ccaa_recetado_o_no.px")
df_px <- as.data.frame(archivo_px)
# Ver las primeras filas
head(df_px)
View(df_px)
# quedarme solo con los antibióticos
antibioticos <- df_px[df_px[["Tipo.de.medicamento"]] == "Antibióticos" & df_px$`Sexo` == "Ambos sexos", ]
antibioticos
View(antibioticos)
# qué comunidad autónoma se automedica más
antibioticos_sin_receta <- antibioticos[antibioticos$`Recetado` == "No recetado",]
antibioticos_sin_receta
View(antibioticos_sin_receta)
antibioticos_sin_receta <- antibioticos_sin_receta %>%
filter(value != 0)
consumo_comunidades <- antibioticos_sin_receta %>%
group_by(`Comunidad.autónoma`) %>%
#summarise(Total_Consumo = sum(as.numeric(value), na.rm = TRUE)) %>%
arrange(desc(value))
consumo_comunidades
View(consumo_comunidades)
ggplot(consumo_comunidades, aes(x = "", y = value, fill = `Comunidad.autónoma`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Consumo de Antibióticos por Comunidad Autónoma",
fill = "Comunidad Autónoma") +
theme_void()  # Elimina el fondo y los ejes
View(df_px)
View(antibioticos)
consumo_comunidades <- antibioticos_sin_receta %>%
group_by(`Comunidad.autónoma`) %>%
#summarise(Total_Consumo = sum(as.numeric(value), na.rm = TRUE)) %>%
arrange(desc(value))
consumo_comunidades
View(consumo_comunidades)
<<<<<<< HEAD
library(tidyverse)
library(rjson)
library(tidyjson)
library(dplyr)
# teniendo el archivo DDD este no es necesario, no sirve
consumo_J01 <- fromJSON(file = "INPUT/DATA/consumo_ATC_J01_sectorHospitalario_vs_sectorComunitario_2022.JSON")
consumo_J01
View(consumo_J01)
library(readr)
library(dplyr)
AMR_2023_Interactive_dashboard_1 <- read_csv("C:/Users/usuario/seminario_fuentes/INPUT/DATA/AMR - 2023 Interactive dashboard_1.txt")
View(AMR_2023_Interactive_dashboard_1)
library(pxR)
library(readr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Leer el archivo .px
archivo_px <- read.px("C:/Users/usuario/seminario_fuentes/INPUT/DATA/datos_ccaa/tipo_ccaa_recetado_o_no.px")
df_px <- as.data.frame(archivo_px)
# Ver las primeras filas
head(df_px)
View(df_px)
archivo_px
View(archivo_px)
View(archivo_px)
View(df_px)
library(pxR)
library(readr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Leer el archivo .px
archivo_px <- read.px("C:/Users/usuario/seminario_fuentes/INPUT/DATA/datos_ccaa/tipo_ccaa_recetado_o_no.px")
View(archivo_px)
df_px <- as.data.frame(archivo_px)
# Ver las primeras filas
head(df_px)
View(df_px)
# quedarme solo con los antibióticos
antibiotic <- df_px[df_px[["Tipo.de.medicamento"]] == "Antibióticos" & df_px$`Sexo` == "Ambos sexos", ]
antibiotic
View(antibiotic)
# qué comunidad autónoma se automedica más
antibioticos_sin_receta <- antibiotic[antibiotic$`Recetado` == "No recetado",]
antibioticos_sin_receta
View(antibioticos_sin_receta)
=======
>>>>>>> fa619679b8b0ef222d841f7208f5a598d7b5fec3
>>>>>>> 892ebe1913be2e7c869ada4acfde37f1424ca08a
library(httr)
library(tidyverse)
library(jsonlite)
library(readxl)
library(rjson)
obtener_nombre<-function(carpeta){
archivos <- as.list(list.files(path =carpeta))
lista_nombres<-list()
for(i in 1:length(archivos)){
posicion1<-regexpr("_", archivos[[i]])
posicion2<-regexpr("\\.", archivos[[i]])
subcadena<-substr(archivos[[i]], posicion1+1, posicion2-1)
lista_nombres[[i]]<-subcadena
}
return(lista_nombres)
}
library(httr)
library(tidyverse)
library(jsonlite)
library(readxl)
library(rjson)
obtener_nombre<-function(carpeta){
archivos <- as.list(list.files(path =carpeta))
lista_nombres<-list()
for(i in 1:length(archivos)){
posicion1<-regexpr("_", archivos[[i]])
posicion2<-regexpr("\\.", archivos[[i]])
subcadena<-substr(archivos[[i]], posicion1+1, posicion2-1)
lista_nombres[[i]]<-subcadena
}
return(lista_nombres)
}
obtener_archivo<-function(direccion){
lista_paises<-obtener_nombre(direccion)
lista_enlace<-list()
direccion_archivos<-list()
for(i in lista_paises){
cada_pais<-paste0("AMR_",i,".json")
lista_enlace[i]<-cada_pais
}
for(i in lista_enlace){
cada_archivo<-paste0(direccion,"/",i)
direccion_archivos[i]<-cada_archivo
}
for(i in direccion_archivos){
pais<-fromJSON(file= i)
enlace<-pais$links$archive
respuesta_archivo <- GET(enlace)# Hacer la solicitud HTTP para descargar el archivo
nombre_archivo<-basename(enlace)#Extrae el nombre del archivo de la URL
if (status_code(respuesta_archivo) == 200) {# Verificar si la solicitud fue exitosa (código 200, código estándar HTTP que significa "OK")
# Guardar el archivo ZIP localmente en formato binario
writeBin(content(respuesta_archivo, "raw"), nombre_archivo)
print("Archivo ZIP descargado correctamente.")
unzip(nombre_archivo, exdir = "carpeta_destino", overwrite = TRUE)
} else {
print(paste("Error al descargar el archivo. Código de respuesta:", status_code(respuesta_archivo)))
}
}
}
obtener_archivo("INPUT/DATA/Resistecia_Antibioticos_UE")
leer_archivo <- function(carpeta) {
carpeta_destino <- carpeta
archivos_zip <- list.files(carpeta_destino, pattern = "\\.zip$", full.names = TRUE)
# Iterar sobre los archivos .zip y descomprimirlos
for (archivo in archivos_zip) {
# Descomprimir el archivo .zip
archivos_extraidos <- unzip(archivo, exdir = carpeta_destino, overwrite = TRUE)
print(paste("Descomprimido:", archivo))  # Imprimir cada archivo que se descomprime
# Filtrar el archivo .xlsx entre los extraídos
archivo_xlsx <- archivos_extraidos[grepl("\\.xlsx$", archivos_extraidos)]#Aquí, grepl() busca archivos cuyos nombres terminen con .xlsx
# Verificar si hay algún archivo .xlsx descomprimido
if (length(archivo_xlsx) > 0) {
# Leer el archivo Excel como dataframe
datos_xlsx <- read_excel(archivo_xlsx[1])  # Leer el primer archivo .xlsx encontrado
# Asignar el dataframe al Global Environment usando el nombre del archivo como variable
nombre_variable <- make.names(basename(archivo_xlsx[1]))  # Crear un nombre de variable válido
assign(nombre_variable, datos_xlsx, envir = .GlobalEnv)  # Asignar el dataframe al Global Environment
}
}
}
leer_archivo("carpeta_destino")
# Cargar dplyr
library(dplyr)
library(ggplot2)
# 1. Listar los nombres de todos los dataframes que terminan en ".xlsx" (ajusta si es necesario)
nombres_dataframes <- ls(pattern = "_AMR_PUB\\.xlsx$")
# 2. Convertir los nombres a una lista de dataframes usando mget()
lista_dataframes <- mget(nombres_dataframes)
# 3. Unir todos los dataframes en uno solo usando bind_rows
df_combinado <- bind_rows(lista_dataframes, .id = "origen")
#seleccionamos las columnas que vamos a necesitar
paises_UE_df<-df_combinado%>%
select(rep_Country_name,rep_Country_code,zoonosis_name,matrix_name,totUnitsTested,totUnitsPositive,sampUnitType_name,sampType_name,MIC_name,CUTOFFVALUE)%>%
filter(zoonosis_name != "Escherichia coli, non-pathogenic, unspecified")#filtramos las columnas que sean patogénicas
# Nuevo vector con los nombres de las columnas
nuevos_nombres <- c("NombrePais", "Codigo", "zoonosis_name","OrigenMuestra", "TotalMuestras","MuestraPositiva","Tipo_Unidad_Muestra","TipoMuestra","MIC_name","ValorCorte")  # Modifica según el número de columnas
# Asignar los nuevos nombres de las columnas al data frame
colnames(paises_UE_df) <- nuevos_nombres
save.image("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/paisesUE_datosAMR.RData")
library(sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
# Graficar el mapa coloreado por tasa de positividad con zoom en Europa
ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Cargar librerías necesarias
library(ggplot2)
# Cargar librerías necesarias
library(ggplot2)
library(plotly)
# Crear el gráfico de mapa de Europa con ggplot2
p <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(p)
# Mostrar el gráfico interactivo
interactive_map
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/paisesUE_datosAMR.RData")
library(sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
library(sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
world_map
View(world_map)
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/paisesUE_datosAMR.RData")
library(sf)
paises_UE <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
View(world_map)
world_map_europe <- as.data.frame(world_map %>% filter(NAME %in% paises_UE))
# Cargar dplyr
library(dplyr)
library(ggplot2)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
world_map <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos para que solo contenga
world_map_europe <- world_map %>%
filter(NAME %in% paises_UE)
positivity_by_country <- paises_UE_df %>%
group_by(NombrePais) %>%
summarize(total_tested = sum(TotalMuestras, na.rm = TRUE),
total_positive = sum(MuestraPositiva, na.rm = TRUE)) %>%
mutate(positivity_rate = (total_positive / total_tested) * 100)
# Unir datos de positividad al mapa
world_map_europe$NAME <- as.character(world_map_europe$NAME)
positivity_by_country$NombrePais <- as.character(positivity_by_country$NombrePais)
# Realizar el join usando las columnas correctas
world_map_europe <- world_map_europe %>%
left_join(positivity_by_country, by = c("NAME" = "NombrePais"))
# Cargar librerías necesarias
library(ggplot2)
library(plotly)
# Crear el gráfico de mapa de Europa con ggplot2
p <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(p)
# Mostrar el gráfico interactivo
interactive_map
# Crear el gráfico de mapa de Europa con ggplot2
p <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Crear el gráfico de mapa de Europa con ggplot2
p <- ggplot(world_map_europe) +
geom_sf(aes(fill = positivity_rate)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
interactive_map <- ggplotly(p)
# Mostrar el gráfico interactivo
interactive_map
View(paises_UE_df)
# Crear una nueva columna en el dataframe con la clasificación
resistencia_paises <- paises_UE_df%>%
mutate(Resistencia = ifelse(MIC_name >= ValorCorte, "Resistente", "Susceptible"))
# Ver el resumen de los datos clasificados
summary(resistencia_paises$Resistencia)
# Contar cuántos son resistentes y cuántos son susceptibles
table(resistencia_paises$Resistencia)
# Grafico de la proporción de resistencia por país
ggplot(resistencia_paises, aes(x = Country, fill = Resistencia)) +
geom_bar(position = "fill") +
labs(title = "Proporción de Resistencia Antimicrobiana por País",
y = "Proporción", x = "País") +
theme_minimal()
# Grafico de la proporción de resistencia por país
ggplot(resistencia_paises, aes(x = NombrePais, fill = Resistencia)) +
geom_bar(position = "fill") +
labs(title = "Proporción de Resistencia Antimicrobiana por País",
y = "Proporción", x = "País") +
theme_minimal()
# Grafico de la proporción de resistencia por país
ggplot(resistencia_paises, aes(x = NombrePais, fill = Resistencia)) +
geom_bar(position = "fill") +
labs(title = "Proporción de Resistencia Antimicrobiana por País",
y = "Proporción", x = NombrePais) +
theme_minimal()
# Grafico de la proporción de resistencia por país
ggplot(resistencia_paises, aes(x = NombrePais, fill = Resistencia)) +
geom_bar(position = "fill") +
labs(title = "Proporción de Resistencia Antimicrobiana por País",
y = "Proporción", x = paises_UE_df$NombrePais) +
theme_minimal()
# Calcular la media de TotalMuestras y MuestraPositiva por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(NombrePais, zoonosis_name) %>%
summarise(
MediaTotalMuestras = mean(TotalMuestras, na.rm = TRUE),
MediaMuestraPositiva = mean(MuestraPositiva, na.rm = TRUE)
)
# Mostrar los resultados
print(media_bacterias)
tipos_bacterias <- paises_UE_df %>%
distinct(zoonosis_name)
tipos_bacterias
# Usar sub() para mantener solo el primer nombre en la columna zoonosis_name
paises_UE_df <- paises_UE_df %>%
mutate(zoonosis_name = sub(" .*", "", zoonosis_name))
tipos_bacterias <- paises_UE_df %>%
distinct(zoonosis_name)
tipos_bacterias
# Calcular la media de TotalMuestras y MuestraPositiva por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(NombrePais, zoonosis_name) %>%
summarise(
MediaTotalMuestras = mean(TotalMuestras, na.rm = TRUE),
MediaMuestraPositiva = mean(MuestraPositiva, na.rm = TRUE)
)
# Mostrar los resultados
print(media_bacterias)
# Crear un nuevo dataframe con la media de muestras positivas por país y bacteria
media_bacterias <- paises_UE_df %>%
group_by(zoonosis_name, NombrePais) %>%
summarise(MediaMuestraPositiva = mean(TotalMuestras/MuestraPositiva, na.rm = TRUE)) %>%
ungroup()
# Ver el resultado
print(media_bacterias)
View(media_bacterias)
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_bacterias, ~NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = grupo, y = MediaMuestraPositiva, color = NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_bacterias, ~NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x = zoonosis_name, y = MediaMuestraPositiva, color = NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# Mostrar el gráfico interactivo
interactive_scatter_plot
# Crear el conjunto de datos interactivo con highlight_key
incidencia_keyed <- highlight_key(media_bacterias, ~media_bacterias$NombrePais)
# Crear el gráfico ggplot con el texto configurado para el tooltip
scatter_plot <- ggplot(incidencia_keyed, aes(x =media_bacterias$zoonosis_name, y = MediaMuestraPositiva, color = media_bacterias$NombrePais, text = paste("País:", NombrePais))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Population vs Mean Incidence Value by Region",
x = "Population", y = "Mean Incidence Value") +
theme_classic()
# Convertir el gráfico ggplot en un gráfico interactivo de plotly con highlight
interactive_scatter_plot <- ggplotly(scatter_plot, tooltip = "text") %>%
highlight(on = "plotly_click", off = "plotly_doubleclick", color = "red", opacityDim = 0.2)
# Mostrar el gráfico interactivo
interactive_scatter_plot
load("C:/Users/deyan/fuentes/seminario_fuentes/OUTPUT/paisesUE_datosAMR.RData")
