# Mostrar el gráfico interactivo
graficas_unidas
ggplot(positivos_PIB,aes(x=PIB, y=Valores))+
geom_point(aes(color=factor(Variable)))+
geom_smooth(method = 'lm',aes(colour=factor(Variable)))+
labs(title = 'Relación entre PIB y resistencia antimicrobiana',
y='positivos en AMR',
colour='poblaciones de positivos')
# Mostrar el gráfico interactivo
graficas_unidas
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")%>%
mutate(DDD_per_100_inhabitants_per_year = DDD_per_100_inhabitants_per_day*365*500)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU*32.4/100)%>%
dplyr::select(-DDD_per_100_inhabitants_per_day)%>%
left_join(x = ., y = media_region, by = c("Country" = "RegionCode"))%>%
group_by(Country, mean_value_region)%>%
dplyr::rename("100 habitantes (mg)" = DDD_per_100_inhabitants_per_year, "100 PCU (mg)" = Antibiotic_use_in_livestock_100_PCU, "Valor" = mean_value_region)%>%
pivot_longer(., names_to = "Consumo", values_to = "Dosis", cols= c(2:3))
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")%>%
dplyr::mutate(DDD_per_100_inhabitants_per_year = DDD_per_100_inhabitants_per_day*365*500)%>%
dplyr::mutate(Antibiotic_use_in_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU*32.4/100)%>%
dplyr::select(-DDD_per_100_inhabitants_per_day)%>%
left_join(x = ., y = media_region, by = c("Country" = "RegionCode"))%>%
group_by(Country, mean_value_region)%>%
dplyr::rename("100 habitantes (mg)" = DDD_per_100_inhabitants_per_year, "100 PCU (mg)" = Antibiotic_use_in_livestock_100_PCU, "Valor" = mean_value_region)%>%
pivot_longer(., names_to = "Consumo", values_to = "Dosis", cols= c(2:3))
antibioticos_europa_ganaderia <- read_csv("INPUT/DATA/antibioticos_europa_ganaderia.csv")
antib <- antibioticos_europa_ganaderia%>%
mutate(Entity = case_when(
Entity == "Slovakia" ~ "SK",
Entity == "Belgium" ~ "BE",
Entity == "Cyprus" ~ "CY",
Entity == "Greece" ~ "EL",
Entity == "Romania" ~ "RO",
Entity == "Bulgaria" ~ "BG",
Entity == "France" ~ "FR",
Entity == "Malta" ~ "MT",
Entity == "Poland" ~ "PL",
Entity == "Spain" ~ "ES",
Entity == "Ireland" ~ "IE",
Entity == "Italy" ~ "IT",
Entity == "Luxembourg" ~ "LU",
Entity == "Portugal" ~ "PT",
Entity == "Czechia" ~ "CZ",
Entity == "Finland" ~ "FI",
Entity == "Austria" ~ "AT",
Entity == "Germany" ~ "DE",
Entity == "Denmark" ~ "DK",
Entity == "Estonia" ~ "EE",
Entity == "Hungary" ~ "HU",
Entity == "Croatia" ~ "HR",
Entity == "Lithuania" ~ "LT",
Entity == "Latvia" ~ "LV",
Entity == "Netherlands" ~ "NL",
Entity == "Sweden" ~ "SE",
Entity == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
select(-Code)%>%
filter(Year == "2015")%>%
dplyr::rename(Country = Entity)
ant_europa_g <- read_excel("INPUT/DATA/consumo_ganaderia_2022.xlsx", skip = 3)
a_e_g <- ant_europa_g %>%
select("Country", "...5")%>%
dplyr::rename(Antibiotic_use_in_livestock_1000_PCU = `...5`)%>%
mutate(Year = "2022")%>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czech Republic" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Germany" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Sweden" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
relocate(3, .before = 2)
new <- a_e_g %>%
select(-Year)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10)%>%
mutate(Antibiotic_day_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU/365)%>%
select(-Antibiotic_use_in_livestock_1000_PCU, -Antibiotic_use_in_livestock_100_PCU)
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")%>%
mutate(DDD_per_100_inhabitants_per_year = DDD_per_100_inhabitants_per_day*365*500)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU*32.4/100)%>%
dplyr::select(-DDD_per_100_inhabitants_per_day)%>%
left_join(x = ., y = media_region, by = c("Country" = "RegionCode"))%>%
group_by(Country, mean_value_region)%>%
dplyr::rename("100 habitantes (mg)" = DDD_per_100_inhabitants_per_year, "100 PCU (mg)" = Antibiotic_use_in_livestock_100_PCU, "Valor" = mean_value_region)%>%
pivot_longer(., names_to = "Consumo", values_to = "Dosis", cols= c(2:3))
library(readr)
library(readxl)
library(dplyr)
antibioticos_europa_ganaderia <- read_csv("INPUT/DATA/antibioticos_europa_ganaderia.csv")
View(antibioticos_europa_ganaderia)
antib <- antibioticos_europa_ganaderia%>%
mutate(Entity = case_when(
Entity == "Slovakia" ~ "SK",
Entity == "Belgium" ~ "BE",
Entity == "Cyprus" ~ "CY",
Entity == "Greece" ~ "EL",
Entity == "Romania" ~ "RO",
Entity == "Bulgaria" ~ "BG",
Entity == "France" ~ "FR",
Entity == "Malta" ~ "MT",
Entity == "Poland" ~ "PL",
Entity == "Spain" ~ "ES",
Entity == "Ireland" ~ "IE",
Entity == "Italy" ~ "IT",
Entity == "Luxembourg" ~ "LU",
Entity == "Portugal" ~ "PT",
Entity == "Czechia" ~ "CZ",
Entity == "Finland" ~ "FI",
Entity == "Austria" ~ "AT",
Entity == "Germany" ~ "DE",
Entity == "Denmark" ~ "DK",
Entity == "Estonia" ~ "EE",
Entity == "Hungary" ~ "HU",
Entity == "Croatia" ~ "HR",
Entity == "Lithuania" ~ "LT",
Entity == "Latvia" ~ "LV",
Entity == "Netherlands" ~ "NL",
Entity == "Sweden" ~ "SE",
Entity == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
select(-Code)%>%
filter(Year == "2015")%>%
dplyr::rename(Country = Entity)
ant_europa_g <- read_excel("INPUT/DATA/consumo_ganaderia_2022.xlsx", skip = 3)
View(ant_europa_g)
a_e_g <- ant_europa_g %>%
select("Country", "...5")%>%
dplyr::rename(Antibiotic_use_in_livestock_1000_PCU = `...5`)%>%
mutate(Year = "2022")%>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czech Republic" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Germany" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Sweden" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
drop_na()%>%
relocate(3, .before = 2)
new <- a_e_g %>%
select(-Year)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU)/10)%>%
mutate(Antibiotic_day_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU/365)%>%
select(-Antibiotic_use_in_livestock_1000_PCU, -Antibiotic_use_in_livestock_100_PCU)
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")%>%
mutate(DDD_per_100_inhabitants_per_year = DDD_per_100_inhabitants_per_day*365*500)%>%
mutate(Antibiotic_use_in_livestock_100_PCU = Antibiotic_use_in_livestock_100_PCU*32.4/100)%>%
dplyr::select(-DDD_per_100_inhabitants_per_day)%>%
left_join(x = ., y = media_region, by = c("Country" = "RegionCode"))%>%
group_by(Country, mean_value_region)%>%
dplyr::rename("100 habitantes (mg)" = DDD_per_100_inhabitants_per_year, "100 PCU (mg)" = Antibiotic_use_in_livestock_100_PCU, "Valor" = mean_value_region)%>%
pivot_longer(., names_to = "Consumo", values_to = "Dosis", cols= c(2:3))
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")
View(new)
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_Json
# --------------------
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
DDD_Europa_df <- DDD_Europa_df %>%
mutate(Country = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czechia" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Norway" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Iceland" ~ "SE",
Country == "Slovenia" ~ "SI",
))%>%
mutate(DDD_per_100_inhabitants_per_day = DDD_per_1000_inhabitants_per_day/10)%>%
select(-DDD_per_1000_inhabitants_per_day)
# al tratarse del número de dosis estándar consumidas diariamente por cada 1000 personas, se divide entre 10 para
# que sea número de dosis diarias por cada 100 habitantes.
# resumen: el x% de la población de cada país consume antibiótico de forma diaria en el sector
# hospitalario y comunitario.
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_100_inhabitants_per_day),
y = DDD_per_100_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 100 habitantes por día en Europa",
x = "País",
y = "DDD por 100 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
paises_consumo_ab_sectores<-left_join(x = DDD_Europa_df, y = new, by = "Country")
View(new)
View(paises_consumo_ab_sectores)
summary(paises_consumo_ab_sectores)
str(paises_consumo_ab_sectores)
View(media_region)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
mapa_mundo <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
paises_UE_mapa <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
library(sf)
library(ggplot2)
library(plotly)
library(dplyr)
library(leaflet)  # Para crear mapas interactivos
library(sf)       # Para trabajar con datos espaciales (sf)
library(viridis)
paises_UE_mapa <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
# Suponiendo que tienes un objeto `world_map` con las geometrías de países
# y `positivity_by_country` es un data frame con las tasas de positividad por país
mapa_mundo <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
View(mapa_mundo)
#Filtramos para que solo contenga
mapa_mundo_europa <- mapa_mudo %>%
filter(NAME %in% paises_UE_mapa)
#Filtramos para que solo contenga
mapa_mundo_europa <- mapa_mundo %>%
filter(NAME %in% paises_UE_mapa)
View(mapa_mundo_europa)
View(media_region)
#Filtramos para que solo contenga
mapa_mundo_europa <- mapa_mundo %>%
filter(NAME %in% paises_UE_mapa) %>%
mutate(NAME = case_when(
Country == "Slovakia" ~ "SK",
Country == "Belgium" ~ "BE",
Country == "Cyprus" ~ "CY",
Country == "Greece" ~ "EL",
Country == "Romania" ~ "RO",
Country == "Bulgaria" ~ "BG",
Country == "France" ~ "FR",
Country == "Malta" ~ "MT",
Country == "Poland" ~ "PL",
Country == "Spain" ~ "ES",
Country == "Ireland" ~ "IE",
Country == "Italy" ~ "IT",
Country == "Luxembourg" ~ "LU",
Country == "Portugal" ~ "PT",
Country == "Czechia" ~ "CZ",
Country == "Finland" ~ "FI",
Country == "Austria" ~ "AT",
Country == "Norway" ~ "DE",
Country == "Denmark" ~ "DK",
Country == "Estonia" ~ "EE",
Country == "Hungary" ~ "HU",
Country == "Croatia" ~ "HR",
Country == "Lithuania" ~ "LT",
Country == "Latvia" ~ "LV",
Country == "Netherlands" ~ "NL",
Country == "Iceland" ~ "SE",
Country == "Slovenia" ~ "SI",
))
#Filtramos para que solo contenga
mapa_mundo_europa <- mapa_mundo %>%
filter(NAME %in% paises_UE_mapa) %>%
mutate(NAME = case_when(
NAME == "Slovakia" ~ "SK",
NAME == "Belgium" ~ "BE",
NAME == "Cyprus" ~ "CY",
NAME == "Greece" ~ "EL",
NAME == "Romania" ~ "RO",
NAME == "Bulgaria" ~ "BG",
NAME == "France" ~ "FR",
NAME == "Malta" ~ "MT",
NAME == "Poland" ~ "PL",
NAME == "Spain" ~ "ES",
NAME == "Ireland" ~ "IE",
NAME == "Italy" ~ "IT",
NAME == "Luxembourg" ~ "LU",
NAME == "Portugal" ~ "PT",
NAME == "Czechia" ~ "CZ",
NAME == "Finland" ~ "FI",
NAME == "Austria" ~ "AT",
NAME == "Norway" ~ "DE",
NAME == "Denmark" ~ "DK",
NAME == "Estonia" ~ "EE",
NAME == "Hungary" ~ "HU",
NAME == "Croatia" ~ "HR",
NAME == "Lithuania" ~ "LT",
NAME == "Latvia" ~ "LV",
NAME == "Netherlands" ~ "NL",
NAME == "Iceland" ~ "SE",
NAME == "Slovenia" ~ "SI",
))
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(media_region, by = c("NAME" = "RegionCode"))
mapa_mundo_europa
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = ratio_positivo)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = mean_value_region)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
# Mostrar el gráfico interactivo
mapa_interactivo
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = mean_value_region)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))+
geom_sf_interactive(
#data = filter(world_sf, !is.na(Happiness_Score)),
aes( tooltip = NAME, data_id = NAME)
)
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
# Mostrar el gráfico interactivo
mapa_interactivo
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(media_region, by = c("NAME" = "RegionCode")) %>%
dplyr::rename(Porcentaje_positivos=mean_value_region)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(media_region, by = c("NAME" = "RegionCode")) %>%
dplyr::rename(Porcentaje_positivos='mean_value_region')
mapa_mundo_europa <- mapa_mundo_europa %>%
left_join(media_region, by = c("NAME" = "RegionCode"))
# Realizar el join usando las columnas correctas
mapa_mundo_europa <-left_join(x=mapa_mundo_europa,y=media_region, by = c("NAME" = "RegionCode")) %>%
dplyr::rename(Porcentaje_positivos='mean_value_region')
mapa_mundo_europa
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = mean_value_region)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
# Mostrar el gráfico interactivo
mapa_interactivo
# Realizar el join usando las columnas correctas
mapa_mundo_europa <-left_join(x=mapa_mundo_europa,y=media_region, by = c("NAME" = "RegionCode")) %>%
dplyr::rename(Porcentaje_positivos=mean_value_region)
# Realizar el join usando las columnas correctas
mapa_mundo_europa <-left_join(x=mapa_mundo_europa,y=media_region, by = c("NAME" = "RegionCode")) %>%
dplyr::rename(Porcentaje_positivos=mean_value_region)
mapa_mundo_europa <-left_join(x=mapa_mundo_europa,y=media_region, by = c("NAME" = "RegionCode"))
paises_UE_mapa <- c(
"Cyprus", "France", "Lithuania", "Czechia", "Germany",
"Estonia", "Latvia", "Sweden", "Finland", "Luxembourg",
"Belgium", "Spain", "Denmark", "Romania", "Hungary",
"Slovakia", "Poland", "Ireland", "Greece", "Austria",
"Italy", "Netherlands", "Croatia", "Slovenia", "Bulgaria",
"Portugal", "Malta"
)
mapa_mundo <- st_read("INPUT/DATA/mapaMundi")  # Cargar el mapa de países en formato `sf`
#Filtramos y cambiamos a codigo para poder unir
mapa_mundo_europa <- mapa_mundo %>%
filter(NAME %in% paises_UE_mapa) %>%
mutate(NAME = case_when(
NAME == "Slovakia" ~ "SK",
NAME == "Belgium" ~ "BE",
NAME == "Cyprus" ~ "CY",
NAME == "Greece" ~ "EL",
NAME == "Romania" ~ "RO",
NAME == "Bulgaria" ~ "BG",
NAME == "France" ~ "FR",
NAME == "Malta" ~ "MT",
NAME == "Poland" ~ "PL",
NAME == "Spain" ~ "ES",
NAME == "Ireland" ~ "IE",
NAME == "Italy" ~ "IT",
NAME == "Luxembourg" ~ "LU",
NAME == "Portugal" ~ "PT",
NAME == "Czechia" ~ "CZ",
NAME == "Finland" ~ "FI",
NAME == "Austria" ~ "AT",
NAME == "Norway" ~ "DE",
NAME == "Denmark" ~ "DK",
NAME == "Estonia" ~ "EE",
NAME == "Hungary" ~ "HU",
NAME == "Croatia" ~ "HR",
NAME == "Lithuania" ~ "LT",
NAME == "Latvia" ~ "LV",
NAME == "Netherlands" ~ "NL",
NAME == "Iceland" ~ "SE",
NAME == "Slovenia" ~ "SI",
))
# Realizar el join usando las columnas correctas
mapa_mundo_europa <-left_join(x=mapa_mundo_europa,y=media_region, by = c("NAME" = "RegionCode")) %>%
dplyr::rename(Porcentaje_positivos=mean_value_region)
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = mean_value_region)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
# Crear el gráfico de mapa de Europa con ggplot2
mapa <- ggplot(mapa_mundo_europa) +
geom_sf(aes(fill = Porcentaje_positivos)) +
scale_fill_viridis_c(option = "plasma", na.value = "gray") +
labs(title = "Tasa de Positividad por País en Europa",
fill = "Tasa de Positividad (%)") +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +  # Ajustar límites para hacer zoom en Europa
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Convertir el gráfico a interactivo con plotly
mapa_interactivo <- ggplotly(mapa)
# Mostrar el gráfico interactivo
mapa_interactivo
