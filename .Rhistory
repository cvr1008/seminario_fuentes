<<<<<<< HEAD
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
p3 <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip = NAME_LONG, data_id = NAME_LONG)
) +
coord_sf(crs = st_crs(3857)) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- (p1 + p2)/ p3 + plot_layout(heights = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
p2 <- ggplot(mapa_mundo_europa, aes(
y= Porcentaje_positivos,
x = NAME_LONG,
tooltip = NAME_LONG,
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
p3 <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip = NAME_LONG, data_id = NAME_LONG)
) +
coord_sf(crs = st_crs(3857)) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- (p1 + p2)/ p3 + plot_layout(heights = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
combined_plot <- (p2 + p3)+ plot_layout(heights = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
p2 <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(desc(Porcentaje_positivos) -NAME_LONG),
tooltip = NAME_LONG,
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- (p2 + p3)+ plot_layout(heights = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1
p2 <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip = NAME_LONG,
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- (p2 + p3)+ plot_layout(heights = c(1, 2))
interactive_plot1
p2
combined_plot <- (p2 + p3)+ plot_layout(heights = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
mapaMundo <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip = NAME_LONG, data_id = NAME_LONG,
text = paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos))
) +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- (p2 + mapaMundo)+ plot_layout(heights = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
combined_plot <- p2 + mapaMundo+ plot_layout(ncol = 2)
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
p2 <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip = NAME_LONG,
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72))
combined_plot <- p2 + mapaMundo+ plot_layout(ncol = 2)
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
p2 <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip = NAME_LONG,
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72),expand=FALSE)
p2
p2 <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip = NAME_LONG,
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72),expand=FALSE)+
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
p2
p2 <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip = NAME_LONG,
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72))+
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
p2
p2 <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip = NAME_LONG,
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
p2
interactive_plot1
combined_plot <- p2 + mapaMundo+ plot_layout(ncol = 2)
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
combined_plot <- combined_plot <- p2 + mapaMundo + plot_layout(widths = c(2, 1))  # Más ancho para p2
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
combined_plot <- p2 / mapaMundo + plot_layout(heights = c(1, 2))  # Más espacio vertical para el mapa
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
combined_plot <- p2 + mapaMundo + plot_layout(widths = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
interactive_plot1<-mapa_interactivo <- ggplotly(interactive_plot1,tooltip = "text")
mapaMundo1 <- ggplotly(interactive_plot1,tooltip = "text")
mapaMundo1 <- ggplotly(mapaMundo,tooltip = "text")
combined_plot <- p2 + mapaMundo1 + plot_layout(widths = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
p2 <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip = Porcentaje_positivos,
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
mapaMundo <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip = NAME_LONG, data_id = NAME_LONG,
text = paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos))
) +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- p2 + mapaMundo1 + plot_layout(widths = c(1, 2))
combined_plot <- p2 + mapaMundo + plot_layout(widths = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
p2 <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos),
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
mapaMundo <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos), data_id = NAME_LONG,
text = paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos))
) +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- p2 + mapaMundo + plot_layout(widths = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
mapaMundo <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos), data_id = NAME_LONG)) +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- p2 + mapaMundo + plot_layout(widths = c(1, 2))
# Create the interactive plot
interactive_plot1 <- girafe(ggobj = combined_plot)
interactive_plot1 <- girafe_options(
interactive_plot1,
opts_hover(css = "fill:red;stroke:black;")
)
interactive_plot1
combined_plot <- graf_barras + mapaMundo + plot_layout(widths = c(1, 2)) +labs(title='Positivos en AMR por pais')
graf_barras <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos),
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
mapaMundo <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos), data_id = NAME_LONG)) +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- graf_barras + mapaMundo + plot_layout(widths = c(1, 2)) +labs(title='Positivos en AMR por pais')
#Creamos el mapa interactivo
mapaCombinado <- girafe(ggobj = combined_plot)
mapaCombinado <- girafe_options(
mapaCombinado,
opts_hover(css = "fill:red;stroke:black;")
)
mapaCombinado
graf_barras <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos),
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal()
mapaMundo <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos), data_id = NAME_LONG)) +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- graf_barras + mapaMundo + plot_layout(widths = c(1, 2)) +labs(title='Porcentaje de positivos en AMR por pais')
#Creamos el mapa interactivo
mapaCombinado <- girafe(ggobj = combined_plot)
mapaCombinado <- girafe_options(
mapaCombinado,
opts_hover(css = "fill:red;stroke:black;")
)
mapaCombinado
graf_barras <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos),
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
mapaMundo <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos), data_id = NAME_LONG)) +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- graf_barras + mapaMundo + plot_layout(widths = c(1, 2)) +labs(title='Porcentaje de positivos en AMR por pais')
#Creamos el mapa interactivo
mapaCombinado <- girafe(ggobj = combined_plot)
mapaCombinado <- girafe_options(
mapaCombinado,
opts_hover(css = "fill:red;stroke:black;")
)
mapaCombinado
graf_barras <- ggplot(mapa_mundo_europa, aes(
y=Porcentaje_positivos,
x = reorder(NAME_LONG,-Porcentaje_positivos),
tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos),
data_id = NAME_LONG,
fill = NAME_LONG
)) +
geom_col_interactive(data = mapa_mundo_europa) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")+
labs(x='paises',y='porcentaje de positivos en AMR')
mapaMundo <- ggplot() +
geom_sf(data = mapa_mundo_europa, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = mapa_mundo_europa,
aes(fill = NAME_LONG, tooltip =  paste("País: ", NAME_LONG, "<br>Tasa de Positividad: ", Porcentaje_positivos), data_id = NAME_LONG)) +
coord_sf(xlim = c(-30, 50), ylim = c(35, 72), expand = FALSE) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
combined_plot <- graf_barras + mapaMundo + plot_layout(widths = c(1, 2)) +labs(title='Porcentaje de positivos en AMR por pais')+
theme(plot.title = element_text(hjust = 0.5))#para modificar y centrar el titulo
#Creamos el mapa interactivo
mapaCombinado <- girafe(ggobj = combined_plot)
mapaCombinado <- girafe_options(
mapaCombinado,
opts_hover(css = "fill:red;stroke:black;")
)
mapaCombinado
combined_plot <- (graf_barras + mapaMundo) +
plot_layout(widths = c(1, 2)) +
plot_annotation(
title = 'Porcentaje de positivos en AMR por país',
theme = theme(plot.title = element_text(hjust = 0.5))
)
#Creamos el mapa interactivo
mapaCombinado <- girafe(ggobj = combined_plot)
mapaCombinado <- girafe_options(
mapaCombinado,
opts_hover(css = "fill:red;stroke:black;")
)
mapaCombinado
=======
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar etiquetas para mejor legibilidad
grafico_pib
pib <- read_table("INPUT/DATA/datos_pib.tsv")
# Cambio de nombre columna
colnames(pib)[1] <- "pais"
# Nos quedamos con las últimas letras
pib$pais <- substr(pib$pais, nchar(pib$pais) - 1, nchar(pib$pais))
lista_pais <- list("BE", "BG", "CZ", "DK", "DE", "EE", "IE", "EL", "ES", "FR", "HR", "IT", "CY", "LV", "LT", "LU", "HU", "MT", "NL",
"AT", "PL", "PT", "RO", "SI", "SK", "FI", "SE")
# nos quedamos solo con los países de la UE
# Filtrar los datos, quitar columnas nulas y seleccionar las columnas necesarias en una tubería
pib_2022_desc <- pib %>%
dplyr::filter(pais %in% unlist(lista_pais)) %>%  # Filtrar por los países en 'lista_pais'
dplyr::select(where(~ all(!is.na(.)))) %>% # Eliminar columnas con todos los valores nulos
dplyr::select(pais, `2022`) %>%                 # Seleccionar las columnas 'pais' y '2022'
arrange(desc(`2022`))                    # Ordenar por el PIB del 2022 en orden descendente
library(dplyr)
library(rlang)
cambio_nombre_codigo <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "Slovakia" ~ "SK",
!!columna_sym == "Belgium" ~ "BE",
!!columna_sym == "Cyprus" ~ "CY",
!!columna_sym == "Greece" ~ "EL",
!!columna_sym == "Romania" ~ "RO",
!!columna_sym == "Bulgaria" ~ "BG",
!!columna_sym == "France" ~ "FR",
!!columna_sym == "Malta" ~ "MT",
!!columna_sym == "Poland" ~ "PL",
!!columna_sym == "Spain" ~ "ES",
!!columna_sym == "Ireland" ~ "IE",
!!columna_sym == "Italy" ~ "IT",
!!columna_sym == "Luxembourg" ~ "LU",
!!columna_sym == "Portugal" ~ "PT",
!!columna_sym == "Czech Republic" ~ "CZ",
!!columna_sym == "Czechia" ~ "CZ",
!!columna_sym == "Finland" ~ "FI",
!!columna_sym == "Austria" ~ "AT",
!!columna_sym == "Germany" ~ "DE",
!!columna_sym == "Denmark" ~ "DK",
!!columna_sym == "Estonia" ~ "EE",
!!columna_sym == "Hungary" ~ "HU",
!!columna_sym == "Croatia" ~ "HR",
!!columna_sym == "Lithuania" ~ "LT",
!!columna_sym == "Latvia" ~ "LV",
!!columna_sym == "Netherlands" ~ "NL",
!!columna_sym == "Sweden" ~ "SE",
!!columna_sym == "Slovenia" ~ "SI",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
cambio_codigo_nombre <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "SK" ~ "Slovakia",
!!columna_sym == "BE" ~ "Belgium",
!!columna_sym == "CY" ~ "Cyprus",
!!columna_sym == "EL" ~ "Greece",
!!columna_sym == "RO" ~ "Romania",
!!columna_sym == "BG" ~ "Bulgaria",
!!columna_sym == "FR" ~ "France",
!!columna_sym == "MT" ~ "Malta",
!!columna_sym == "PL" ~ "Poland",
!!columna_sym == "ES" ~ "Spain",
!!columna_sym == "IE" ~ "Ireland",
!!columna_sym == "IT" ~ "Italy",
!!columna_sym == "LU" ~ "Luxembourg",
!!columna_sym == "PT" ~ "Portugal",
!!columna_sym == "CZ" ~ "Czech Republic",
!!columna_sym == "FI" ~ "Finland",
!!columna_sym == "AT" ~ "Austria",
!!columna_sym == "DE" ~ "Germany",
!!columna_sym == "DK" ~ "Denmark",
!!columna_sym == "EE" ~ "Estonia",
!!columna_sym == "HU" ~ "Hungary",
!!columna_sym == "HR" ~ "Croatia",
!!columna_sym == "LT" ~ "Lithuania",
!!columna_sym == "LV" ~ "Latvia",
!!columna_sym == "NL" ~ "Netherlands",
!!columna_sym == "SE" ~ "Sweden",
!!columna_sym == "SI" ~ "Slovenia",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# lapply: Aplica una función a cada elemento de una lista y devuelve una lista con los resultados
# function(x): Define una función anónima que será aplicada a cada elemento x de la lista DDD_Europa_Json.
# x$Country: Extrae el campo Country del elemento x.
# x$'DDD per 1000 inhabitants per day': Extrae el campo DDD per 1000 inhabitants per day de x y lo convierte en numérico con as.numeric.
# data.frame(...): Crea un dataframe con dos columnas
# Usar la función 'cambio_nombre_codigo' para convertir nombres de países en códigos
DDD_Europa_df <- cambio_nombre_codigo(DDD_Europa_df, "Country")
# Añadir columna para calcular DDD por cada 100 habitantes y eliminar la columna original
DDD_Europa_df <- DDD_Europa_df %>%
dplyr::mutate(DDD_per_100_inhabitants_per_day = DDD_per_1000_inhabitants_per_day / 10) %>%
select(-DDD_per_1000_inhabitants_per_day)
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# lapply: Aplica una función a cada elemento de una lista y devuelve una lista con los resultados
# function(x): Define una función anónima que será aplicada a cada elemento x de la lista DDD_Europa_Json.
# x$Country: Extrae el campo Country del elemento x.
# x$'DDD per 1000 inhabitants per day': Extrae el campo DDD per 1000 inhabitants per day de x y lo convierte en numérico con as.numeric.
# data.frame(...): Crea un dataframe con dos columnas
# Usar la función 'cambio_nombre_codigo' para convertir nombres de países en códigos
DDD_Europa_df <- cambio_nombre_codigo(DDD_Europa_df, "Country")
library(dplyr)
library(rlang)
cambio_nombre_codigo <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "Slovakia" ~ "SK",
!!columna_sym == "Belgium" ~ "BE",
!!columna_sym == "Cyprus" ~ "CY",
!!columna_sym == "Greece" ~ "EL",
!!columna_sym == "Romania" ~ "RO",
!!columna_sym == "Bulgaria" ~ "BG",
!!columna_sym == "France" ~ "FR",
!!columna_sym == "Malta" ~ "MT",
!!columna_sym == "Poland" ~ "PL",
!!columna_sym == "Spain" ~ "ES",
!!columna_sym == "Ireland" ~ "IE",
!!columna_sym == "Italy" ~ "IT",
!!columna_sym == "Luxembourg" ~ "LU",
!!columna_sym == "Portugal" ~ "PT",
!!columna_sym == "Czech Republic" ~ "CZ",
!!columna_sym == "Czechia" ~ "CZ",
!!columna_sym == "Finland" ~ "FI",
!!columna_sym == "Austria" ~ "AT",
!!columna_sym == "Germany" ~ "DE",
!!columna_sym == "Denmark" ~ "DK",
!!columna_sym == "Estonia" ~ "EE",
!!columna_sym == "Hungary" ~ "HU",
!!columna_sym == "Croatia" ~ "HR",
!!columna_sym == "Lithuania" ~ "LT",
!!columna_sym == "Latvia" ~ "LV",
!!columna_sym == "Netherlands" ~ "NL",
!!columna_sym == "Sweden" ~ "SE",
!!columna_sym == "Slovenia" ~ "SI",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
cambio_codigo_nombre <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "SK" ~ "Slovakia",
!!columna_sym == "BE" ~ "Belgium",
!!columna_sym == "CY" ~ "Cyprus",
!!columna_sym == "EL" ~ "Greece",
!!columna_sym == "RO" ~ "Romania",
!!columna_sym == "BG" ~ "Bulgaria",
!!columna_sym == "FR" ~ "France",
!!columna_sym == "MT" ~ "Malta",
!!columna_sym == "PL" ~ "Poland",
!!columna_sym == "ES" ~ "Spain",
!!columna_sym == "IE" ~ "Ireland",
!!columna_sym == "IT" ~ "Italy",
!!columna_sym == "LU" ~ "Luxembourg",
!!columna_sym == "PT" ~ "Portugal",
!!columna_sym == "CZ" ~ "Czech Republic",
!!columna_sym == "FI" ~ "Finland",
!!columna_sym == "AT" ~ "Austria",
!!columna_sym == "DE" ~ "Germany",
!!columna_sym == "DK" ~ "Denmark",
!!columna_sym == "EE" ~ "Estonia",
!!columna_sym == "HU" ~ "Hungary",
!!columna_sym == "HR" ~ "Croatia",
!!columna_sym == "LT" ~ "Lithuania",
!!columna_sym == "LV" ~ "Latvia",
!!columna_sym == "NL" ~ "Netherlands",
!!columna_sym == "SE" ~ "Sweden",
!!columna_sym == "SI" ~ "Slovenia",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
library(tidyverse)
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# lapply: Aplica una función a cada elemento de una lista y devuelve una lista con los resultados
# function(x): Define una función anónima que será aplicada a cada elemento x de la lista DDD_Europa_Json.
# x$Country: Extrae el campo Country del elemento x.
# x$'DDD per 1000 inhabitants per day': Extrae el campo DDD per 1000 inhabitants per day de x y lo convierte en numérico con as.numeric.
# data.frame(...): Crea un dataframe con dos columnas
# Usar la función 'cambio_nombre_codigo' para convertir nombres de países en códigos
DDD_Europa_df <- cambio_nombre_codigo(DDD_Europa_df, "Country")
# Añadir columna para calcular DDD por cada 100 habitantes y eliminar la columna original
DDD_Europa_df <- DDD_Europa_df %>%
dplyr::mutate(DDD_per_100_inhabitants_per_day = DDD_per_1000_inhabitants_per_day / 10) %>%
select(-DDD_per_1000_inhabitants_per_day)
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_100_inhabitants_per_day),
y = DDD_per_100_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 100 habitantes por día en Europa",
x = "País",
y = "DDD por 100 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
knitr::opts_chunk$set(echo = TRUE)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
library(dplyr)
library(ggplot2)
library(httr)
library(jsonlite)
library(pxR)
library(plotly)
library(RColorBrewer)
library(readr)
library(readxl)
library(rjson)
library(rlang)
library(sf)
library(tidyr)
library(tidyverse)
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# lapply: Aplica una función a cada elemento de una lista y devuelve una lista con los resultados
# function(x): Define una función anónima que será aplicada a cada elemento x de la lista DDD_Europa_Json.
# x$Country: Extrae el campo Country del elemento x.
# x$'DDD per 1000 inhabitants per day': Extrae el campo DDD per 1000 inhabitants per day de x y lo convierte en numérico con as.numeric.
# data.frame(...): Crea un dataframe con dos columnas
# Usar la función 'cambio_nombre_codigo' para convertir nombres de países en códigos
DDD_Europa_df <- cambio_nombre_codigo(DDD_Europa_df, "Country")
library(dplyr)
library(rlang)
cambio_nombre_codigo <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "Slovakia" ~ "SK",
!!columna_sym == "Belgium" ~ "BE",
!!columna_sym == "Cyprus" ~ "CY",
!!columna_sym == "Greece" ~ "EL",
!!columna_sym == "Romania" ~ "RO",
!!columna_sym == "Bulgaria" ~ "BG",
!!columna_sym == "France" ~ "FR",
!!columna_sym == "Malta" ~ "MT",
!!columna_sym == "Poland" ~ "PL",
!!columna_sym == "Spain" ~ "ES",
!!columna_sym == "Ireland" ~ "IE",
!!columna_sym == "Italy" ~ "IT",
!!columna_sym == "Luxembourg" ~ "LU",
!!columna_sym == "Portugal" ~ "PT",
!!columna_sym == "Czech Republic" ~ "CZ",
!!columna_sym == "Czechia" ~ "CZ",
!!columna_sym == "Finland" ~ "FI",
!!columna_sym == "Austria" ~ "AT",
!!columna_sym == "Germany" ~ "DE",
!!columna_sym == "Denmark" ~ "DK",
!!columna_sym == "Estonia" ~ "EE",
!!columna_sym == "Hungary" ~ "HU",
!!columna_sym == "Croatia" ~ "HR",
!!columna_sym == "Lithuania" ~ "LT",
!!columna_sym == "Latvia" ~ "LV",
!!columna_sym == "Netherlands" ~ "NL",
!!columna_sym == "Sweden" ~ "SE",
!!columna_sym == "Slovenia" ~ "SI",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
cambio_codigo_nombre <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "SK" ~ "Slovakia",
!!columna_sym == "BE" ~ "Belgium",
!!columna_sym == "CY" ~ "Cyprus",
!!columna_sym == "EL" ~ "Greece",
!!columna_sym == "RO" ~ "Romania",
!!columna_sym == "BG" ~ "Bulgaria",
!!columna_sym == "FR" ~ "France",
!!columna_sym == "MT" ~ "Malta",
!!columna_sym == "PL" ~ "Poland",
!!columna_sym == "ES" ~ "Spain",
!!columna_sym == "IE" ~ "Ireland",
!!columna_sym == "IT" ~ "Italy",
!!columna_sym == "LU" ~ "Luxembourg",
!!columna_sym == "PT" ~ "Portugal",
!!columna_sym == "CZ" ~ "Czech Republic",
!!columna_sym == "FI" ~ "Finland",
!!columna_sym == "AT" ~ "Austria",
!!columna_sym == "DE" ~ "Germany",
!!columna_sym == "DK" ~ "Denmark",
!!columna_sym == "EE" ~ "Estonia",
!!columna_sym == "HU" ~ "Hungary",
!!columna_sym == "HR" ~ "Croatia",
!!columna_sym == "LT" ~ "Lithuania",
!!columna_sym == "LV" ~ "Latvia",
!!columna_sym == "NL" ~ "Netherlands",
!!columna_sym == "SE" ~ "Sweden",
!!columna_sym == "SI" ~ "Slovenia",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# lapply: Aplica una función a cada elemento de una lista y devuelve una lista con los resultados
# function(x): Define una función anónima que será aplicada a cada elemento x de la lista DDD_Europa_Json.
# x$Country: Extrae el campo Country del elemento x.
# x$'DDD per 1000 inhabitants per day': Extrae el campo DDD per 1000 inhabitants per day de x y lo convierte en numérico con as.numeric.
# data.frame(...): Crea un dataframe con dos columnas
# Usar la función 'cambio_nombre_codigo' para convertir nombres de países en códigos
DDD_Europa_df <- cambio_nombre_codigo(DDD_Europa_df, "Country")
# Añadir columna para calcular DDD por cada 100 habitantes y eliminar la columna original
DDD_Europa_df <- DDD_Europa_df %>%
dplyr::mutate(DDD_per_100_inhabitants_per_day = DDD_per_1000_inhabitants_per_day / 10) %>%
dplyr::filter(Country %in% unlist(lista_pais)) %>%
select(-DDD_per_1000_inhabitants_per_day)
pib <- read_table("INPUT/DATA/datos_pib.tsv")
# Cambio de nombre columna
colnames(pib)[1] <- "pais"
# Nos quedamos con las últimas letras
pib$pais <- substr(pib$pais, nchar(pib$pais) - 1, nchar(pib$pais))
lista_pais <- list("BE", "BG", "CZ", "DK", "DE", "EE", "IE", "EL", "ES", "FR", "HR", "IT", "CY", "LV", "LT", "LU", "HU", "MT", "NL",
"AT", "PL", "PT", "RO", "SI", "SK", "FI", "SE")
# nos quedamos solo con los países de la UE
# Filtrar los datos, quitar columnas nulas y seleccionar las columnas necesarias en una tubería
pib_2022_desc <- pib %>%
dplyr::filter(pais %in% unlist(lista_pais)) %>%  # Filtrar por los países en 'lista_pais'
dplyr::select(where(~ all(!is.na(.)))) %>% # Eliminar columnas con todos los valores nulos
dplyr::select(pais, `2022`) %>%                 # Seleccionar las columnas 'pais' y '2022'
arrange(desc(`2022`))                    # Ordenar por el PIB del 2022 en orden descendente
DDD_Europa_Json <- fromJSON(file = "INPUT/DATA/DDD_1000_habitantes_paises.JSON")
DDD_Europa_df <- do.call(rbind, lapply(DDD_Europa_Json, function(x) {
data.frame(Country = x$Country,
DDD_per_1000_inhabitants_per_day = as.numeric(x$`DDD per 1000 inhabitants per day`))
}))
# lapply: Aplica una función a cada elemento de una lista y devuelve una lista con los resultados
# function(x): Define una función anónima que será aplicada a cada elemento x de la lista DDD_Europa_Json.
# x$Country: Extrae el campo Country del elemento x.
# x$'DDD per 1000 inhabitants per day': Extrae el campo DDD per 1000 inhabitants per day de x y lo convierte en numérico con as.numeric.
# data.frame(...): Crea un dataframe con dos columnas
# Usar la función 'cambio_nombre_codigo' para convertir nombres de países en códigos
DDD_Europa_df <- cambio_nombre_codigo(DDD_Europa_df, "Country")
# Añadir columna para calcular DDD por cada 100 habitantes y eliminar la columna original
DDD_Europa_df <- DDD_Europa_df %>%
dplyr::mutate(DDD_per_100_inhabitants_per_day = DDD_per_1000_inhabitants_per_day / 10) %>%
dplyr::filter(Country %in% unlist(lista_pais)) %>%
select(-DDD_per_1000_inhabitants_per_day)
grafico_DDD <- ggplot(DDD_Europa_df, aes(x = reorder(Country, -DDD_per_100_inhabitants_per_day),
y = DDD_per_100_inhabitants_per_day)) +
geom_bar(stat = "identity", fill = "turquoise") +
labs(title = "DDD por 100 habitantes por día en Europa",
x = "País",
y = "DDD por 100 habitantes por día") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grafico_DDD
library(readr)
library(readxl)
library(dplyr)
library(tidyr)
ant_europa_g <- read_excel("INPUT/DATA/consumo_ganaderia_2022.xlsx", skip = 3)
View(ant_europa_g)
# Procesamiento inicial de los datos
a_e_g <- ant_europa_g %>%
select("Country", "...5") %>%  # Seleccionar las columnas relevantes
dplyr::rename(Antibiotic_use_in_livestock_1000_PCU = `...5`) %>%  # Renombrar columnas
mutate(Year = "2022") %>%  # Añadir la columna de año
cambio_nombre_codigo("Country") %>%  # Usar la función para cambiar nombres de países a códigos
drop_na() %>%  # Eliminar filas con valores NA
relocate(3, .before = 2)  # Reubicar la columna 'Year' antes de 'Country'
library(dplyr)
library(rlang)
cambio_nombre_codigo <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "Slovakia" ~ "SK",
!!columna_sym == "Belgium" ~ "BE",
!!columna_sym == "Cyprus" ~ "CY",
!!columna_sym == "Greece" ~ "EL",
!!columna_sym == "Romania" ~ "RO",
!!columna_sym == "Bulgaria" ~ "BG",
!!columna_sym == "France" ~ "FR",
!!columna_sym == "Malta" ~ "MT",
!!columna_sym == "Poland" ~ "PL",
!!columna_sym == "Spain" ~ "ES",
!!columna_sym == "Ireland" ~ "IE",
!!columna_sym == "Italy" ~ "IT",
!!columna_sym == "Luxembourg" ~ "LU",
!!columna_sym == "Portugal" ~ "PT",
!!columna_sym == "Czech Republic" ~ "CZ",
!!columna_sym == "Czechia" ~ "CZ",
!!columna_sym == "Finland" ~ "FI",
!!columna_sym == "Austria" ~ "AT",
!!columna_sym == "Germany" ~ "DE",
!!columna_sym == "Denmark" ~ "DK",
!!columna_sym == "Estonia" ~ "EE",
!!columna_sym == "Hungary" ~ "HU",
!!columna_sym == "Croatia" ~ "HR",
!!columna_sym == "Lithuania" ~ "LT",
!!columna_sym == "Latvia" ~ "LV",
!!columna_sym == "Netherlands" ~ "NL",
!!columna_sym == "Sweden" ~ "SE",
!!columna_sym == "Slovenia" ~ "SI",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
cambio_codigo_nombre <- function(Tabla, columna) {
# Convertir el nombre de la columna en un símbolo
columna_sym <- ensym(columna)
Tabla %>%
mutate(
!!columna_sym := case_when(
!!columna_sym == "SK" ~ "Slovakia",
!!columna_sym == "BE" ~ "Belgium",
!!columna_sym == "CY" ~ "Cyprus",
!!columna_sym == "EL" ~ "Greece",
!!columna_sym == "RO" ~ "Romania",
!!columna_sym == "BG" ~ "Bulgaria",
!!columna_sym == "FR" ~ "France",
!!columna_sym == "MT" ~ "Malta",
!!columna_sym == "PL" ~ "Poland",
!!columna_sym == "ES" ~ "Spain",
!!columna_sym == "IE" ~ "Ireland",
!!columna_sym == "IT" ~ "Italy",
!!columna_sym == "LU" ~ "Luxembourg",
!!columna_sym == "PT" ~ "Portugal",
!!columna_sym == "CZ" ~ "Czech Republic",
!!columna_sym == "FI" ~ "Finland",
!!columna_sym == "AT" ~ "Austria",
!!columna_sym == "DE" ~ "Germany",
!!columna_sym == "DK" ~ "Denmark",
!!columna_sym == "EE" ~ "Estonia",
!!columna_sym == "HU" ~ "Hungary",
!!columna_sym == "HR" ~ "Croatia",
!!columna_sym == "LT" ~ "Lithuania",
!!columna_sym == "LV" ~ "Latvia",
!!columna_sym == "NL" ~ "Netherlands",
!!columna_sym == "SE" ~ "Sweden",
!!columna_sym == "SI" ~ "Slovenia",
TRUE ~ as.character(!!columna_sym) # Mantener valores originales si no coinciden
)
)
}
library(readr)
library(readxl)
library(dplyr)
library(tidyr)
ant_europa_g <- read_excel("INPUT/DATA/consumo_ganaderia_2022.xlsx", skip = 3)
View(ant_europa_g)
# Procesamiento inicial de los datos
a_e_g <- ant_europa_g %>%
select("Country", "...5") %>%  # Seleccionar las columnas relevantes
dplyr::rename(Antibiotic_use_in_livestock_1000_PCU = `...5`) %>%  # Renombrar columnas
mutate(Year = "2022") %>%  # Añadir la columna de año
cambio_nombre_codigo("Country") %>%  # Usar la función para cambiar nombres de países a códigos
drop_na() %>%  # Eliminar filas con valores NA
relocate(3, .before = 2)  # Reubicar la columna 'Year' antes de 'Country'
# Crear un nuevo data frame con datos modificados
new <- a_e_g %>%
select(-Year) %>%  # Eliminar la columna 'Year'
mutate(Antibiotic_use_in_livestock_100_PCU = as.numeric(Antibiotic_use_in_livestock_1000_PCU) / 10) %>%  # Calcular el nuevo indicador
select(-Antibiotic_use_in_livestock_1000_PCU)  # Eliminar la columna original
View(new)
View(new)
View(new)
>>>>>>> a86a8e47718edad76ba0c9730141e92a5a4765dc
